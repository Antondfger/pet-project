{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "i31TLuQP6UA-",
    "outputId": "0ea6d71b-1783-4201-b166-c78bcf465e39"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting autoxgb\n",
      "  Downloading autoxgb-0.2.2-py3-none-any.whl (20 kB)\n",
      "Installing collected packages: autoxgb\n",
      "Successfully installed autoxgb-0.2.2\n",
      "Collecting h2o\n",
      "  Downloading h2o-3.42.0.3.tar.gz (240.9 MB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m240.9/240.9 MB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from h2o) (2.31.0)\n",
      "Requirement already satisfied: tabulate in /usr/local/lib/python3.10/dist-packages (from h2o) (0.9.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->h2o) (3.2.0)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->h2o) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->h2o) (2.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->h2o) (2023.7.22)\n",
      "Building wheels for collected packages: h2o\n",
      "  Building wheel for h2o (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
      "  Created wheel for h2o: filename=h2o-3.42.0.3-py2.py3-none-any.whl size=240945068 sha256=1e05a170ef4d8b32110bc1ea22e07125920a24f88bd787d0e9e025d6b84e5cd3\n",
      "  Stored in directory: /root/.cache/pip/wheels/f9/7d/1d/e1258f0558603969a8393cb5b22a18e313337f01627a118302\n",
      "Successfully built h2o\n",
      "Installing collected packages: h2o\n",
      "Successfully installed h2o-3.42.0.3\n",
      "Collecting optuna\n",
      "  Downloading optuna-3.3.0-py3-none-any.whl (404 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m404.2/404.2 kB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hCollecting alembic>=1.5.0 (from optuna)\n",
      "  Downloading alembic-1.12.0-py3-none-any.whl (226 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m226.0/226.0 kB\u001b[0m \u001b[31m12.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hCollecting cmaes>=0.10.0 (from optuna)\n",
      "  Downloading cmaes-0.10.0-py3-none-any.whl (29 kB)\n",
      "Collecting colorlog (from optuna)\n",
      "  Downloading colorlog-6.7.0-py2.py3-none-any.whl (11 kB)\n",
      "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna) (1.23.5)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (23.1)\n",
      "Requirement already satisfied: sqlalchemy>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (2.0.20)\n",
      "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna) (4.66.1)\n",
      "Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna) (6.0.1)\n",
      "Collecting Mako (from alembic>=1.5.0->optuna)\n",
      "  Downloading Mako-1.2.4-py3-none-any.whl (78 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.7/78.7 kB\u001b[0m \u001b[31m10.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (4.5.0)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.3.0->optuna) (2.0.2)\n",
      "Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna) (2.1.3)\n",
      "Installing collected packages: Mako, colorlog, cmaes, alembic, optuna\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "autoxgb 0.2.2 requires fastapi==0.70.0, which is not installed.\n",
      "autoxgb 0.2.2 requires loguru==0.5.3, which is not installed.\n",
      "autoxgb 0.2.2 requires uvicorn==0.15.0, which is not installed.\n",
      "autoxgb 0.2.2 requires joblib==1.1.0, but you have joblib 1.3.2 which is incompatible.\n",
      "autoxgb 0.2.2 requires numpy==1.21.3, but you have numpy 1.23.5 which is incompatible.\n",
      "autoxgb 0.2.2 requires optuna==2.10.0, but you have optuna 3.3.0 which is incompatible.\n",
      "autoxgb 0.2.2 requires pandas==1.3.4, but you have pandas 1.5.3 which is incompatible.\n",
      "autoxgb 0.2.2 requires pyarrow==6.0.0, but you have pyarrow 9.0.0 which is incompatible.\n",
      "autoxgb 0.2.2 requires pydantic==1.8.2, but you have pydantic 1.10.12 which is incompatible.\n",
      "autoxgb 0.2.2 requires scikit-learn==1.0.1, but you have scikit-learn 1.2.2 which is incompatible.\n",
      "autoxgb 0.2.2 requires xgboost==1.5.0, but you have xgboost 1.7.6 which is incompatible.\u001b[0m\u001b[31m\n",
      "\u001b[0mSuccessfully installed Mako-1.2.4 alembic-1.12.0 cmaes-0.10.0 colorlog-6.7.0 optuna-3.3.0\n",
      "Collecting catboost\n",
      "  Downloading catboost-1.2.1-cp310-cp310-manylinux2014_x86_64.whl (98.7 MB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.7/98.7 MB\u001b[0m \u001b[31m9.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.1)\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n",
      "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.23.5)\n",
      "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.5.3)\n",
      "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.11.2)\n",
      "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.15.0)\n",
      "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2023.3.post1)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.1.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.42.1)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.5)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (23.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (9.4.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.1.1)\n",
      "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (8.2.3)\n",
      "Installing collected packages: catboost\n",
      "Successfully installed catboost-1.2.1\n"
     ]
    }
   ],
   "source": [
    "! pip install --no-deps autoxgb\n",
    "!pip install h2o\n",
    "import h2o\n",
    "from h2o.automl import H2OAutoML\n",
    "!pip install optuna\n",
    "!pip install catboost\n",
    "from catboost import CatBoostClassifier\n",
    "from autoxgb import AutoXGB\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.compose import make_column_transformer\n",
    "from catboost import CatBoostClassifier\n",
    "from sklearn.metrics import mean_squared_error as mse\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "import geopandas as gpd\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import make_column_transformer\n",
    "from sklearn.inspection import permutation_importance\n",
    "from sklearn.cluster import KMeans\n",
    "import datetime as dt\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import KFold\n",
    "from tqdm.notebook import tqdm\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from scipy import stats\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.linear_model import RidgeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 120
    },
    "id": "B6AxJlvImBgk",
    "outputId": "54f1bce1-387d-4ebe-9b04-e5dbd0fdbf2c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "     <input type=\"file\" id=\"files-f6a6625d-5182-427b-95bc-302be7d220cf\" name=\"files[]\" multiple disabled\n",
       "        style=\"border:none\" />\n",
       "     <output id=\"result-f6a6625d-5182-427b-95bc-302be7d220cf\">\n",
       "      Upload widget is only available when the cell has been executed in the\n",
       "      current browser session. Please rerun this cell to enable.\n",
       "      </output>\n",
       "      <script>// Copyright 2017 Google LLC\n",
       "//\n",
       "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
       "// you may not use this file except in compliance with the License.\n",
       "// You may obtain a copy of the License at\n",
       "//\n",
       "//      http://www.apache.org/licenses/LICENSE-2.0\n",
       "//\n",
       "// Unless required by applicable law or agreed to in writing, software\n",
       "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
       "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
       "// See the License for the specific language governing permissions and\n",
       "// limitations under the License.\n",
       "\n",
       "/**\n",
       " * @fileoverview Helpers for google.colab Python module.\n",
       " */\n",
       "(function(scope) {\n",
       "function span(text, styleAttributes = {}) {\n",
       "  const element = document.createElement('span');\n",
       "  element.textContent = text;\n",
       "  for (const key of Object.keys(styleAttributes)) {\n",
       "    element.style[key] = styleAttributes[key];\n",
       "  }\n",
       "  return element;\n",
       "}\n",
       "\n",
       "// Max number of bytes which will be uploaded at a time.\n",
       "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
       "\n",
       "function _uploadFiles(inputId, outputId) {\n",
       "  const steps = uploadFilesStep(inputId, outputId);\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  // Cache steps on the outputElement to make it available for the next call\n",
       "  // to uploadFilesContinue from Python.\n",
       "  outputElement.steps = steps;\n",
       "\n",
       "  return _uploadFilesContinue(outputId);\n",
       "}\n",
       "\n",
       "// This is roughly an async generator (not supported in the browser yet),\n",
       "// where there are multiple asynchronous steps and the Python side is going\n",
       "// to poll for completion of each step.\n",
       "// This uses a Promise to block the python side on completion of each step,\n",
       "// then passes the result of the previous step as the input to the next step.\n",
       "function _uploadFilesContinue(outputId) {\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  const steps = outputElement.steps;\n",
       "\n",
       "  const next = steps.next(outputElement.lastPromiseValue);\n",
       "  return Promise.resolve(next.value.promise).then((value) => {\n",
       "    // Cache the last promise value to make it available to the next\n",
       "    // step of the generator.\n",
       "    outputElement.lastPromiseValue = value;\n",
       "    return next.value.response;\n",
       "  });\n",
       "}\n",
       "\n",
       "/**\n",
       " * Generator function which is called between each async step of the upload\n",
       " * process.\n",
       " * @param {string} inputId Element ID of the input file picker element.\n",
       " * @param {string} outputId Element ID of the output display.\n",
       " * @return {!Iterable<!Object>} Iterable of next steps.\n",
       " */\n",
       "function* uploadFilesStep(inputId, outputId) {\n",
       "  const inputElement = document.getElementById(inputId);\n",
       "  inputElement.disabled = false;\n",
       "\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  outputElement.innerHTML = '';\n",
       "\n",
       "  const pickedPromise = new Promise((resolve) => {\n",
       "    inputElement.addEventListener('change', (e) => {\n",
       "      resolve(e.target.files);\n",
       "    });\n",
       "  });\n",
       "\n",
       "  const cancel = document.createElement('button');\n",
       "  inputElement.parentElement.appendChild(cancel);\n",
       "  cancel.textContent = 'Cancel upload';\n",
       "  const cancelPromise = new Promise((resolve) => {\n",
       "    cancel.onclick = () => {\n",
       "      resolve(null);\n",
       "    };\n",
       "  });\n",
       "\n",
       "  // Wait for the user to pick the files.\n",
       "  const files = yield {\n",
       "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
       "    response: {\n",
       "      action: 'starting',\n",
       "    }\n",
       "  };\n",
       "\n",
       "  cancel.remove();\n",
       "\n",
       "  // Disable the input element since further picks are not allowed.\n",
       "  inputElement.disabled = true;\n",
       "\n",
       "  if (!files) {\n",
       "    return {\n",
       "      response: {\n",
       "        action: 'complete',\n",
       "      }\n",
       "    };\n",
       "  }\n",
       "\n",
       "  for (const file of files) {\n",
       "    const li = document.createElement('li');\n",
       "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
       "    li.append(span(\n",
       "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
       "        `last modified: ${\n",
       "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
       "                                    'n/a'} - `));\n",
       "    const percent = span('0% done');\n",
       "    li.appendChild(percent);\n",
       "\n",
       "    outputElement.appendChild(li);\n",
       "\n",
       "    const fileDataPromise = new Promise((resolve) => {\n",
       "      const reader = new FileReader();\n",
       "      reader.onload = (e) => {\n",
       "        resolve(e.target.result);\n",
       "      };\n",
       "      reader.readAsArrayBuffer(file);\n",
       "    });\n",
       "    // Wait for the data to be ready.\n",
       "    let fileData = yield {\n",
       "      promise: fileDataPromise,\n",
       "      response: {\n",
       "        action: 'continue',\n",
       "      }\n",
       "    };\n",
       "\n",
       "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
       "    let position = 0;\n",
       "    do {\n",
       "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
       "      const chunk = new Uint8Array(fileData, position, length);\n",
       "      position += length;\n",
       "\n",
       "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
       "      yield {\n",
       "        response: {\n",
       "          action: 'append',\n",
       "          file: file.name,\n",
       "          data: base64,\n",
       "        },\n",
       "      };\n",
       "\n",
       "      let percentDone = fileData.byteLength === 0 ?\n",
       "          100 :\n",
       "          Math.round((position / fileData.byteLength) * 100);\n",
       "      percent.textContent = `${percentDone}% done`;\n",
       "\n",
       "    } while (position < fileData.byteLength);\n",
       "  }\n",
       "\n",
       "  // All done.\n",
       "  yield {\n",
       "    response: {\n",
       "      action: 'complete',\n",
       "    }\n",
       "  };\n",
       "}\n",
       "\n",
       "scope.google = scope.google || {};\n",
       "scope.google.colab = scope.google.colab || {};\n",
       "scope.google.colab._files = {\n",
       "  _uploadFiles,\n",
       "  _uploadFilesContinue,\n",
       "};\n",
       "})(self);\n",
       "</script> "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving kaggle.json to kaggle.json\n",
      "Downloading school-of-quants-hack-23-final.zip to /content\n",
      " 98% 367M/376M [00:01<00:00, 255MB/s]\n",
      "100% 376M/376M [00:01<00:00, 229MB/s]\n"
     ]
    }
   ],
   "source": [
    "from google.colab import files\n",
    "files.upload()\n",
    "! mkdir ~/.kaggle\n",
    "! cp kaggle.json ~/.kaggle/\n",
    "! chmod 600 ~/.kaggle/kaggle.json\n",
    "! kaggle competitions download -c school-of-quants-hack-23-final\n",
    "! unzip -qq school-of-quants-hack-23-final.zip"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Обозначу все функции здесь"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "w9VP3MugKQvA"
   },
   "outputs": [],
   "source": [
    "def preprocessing(train, enc):\n",
    "  for col in train.columns:\n",
    "    if train[col].dtype == 'float64':\n",
    "       train[col] = train[col].astype(np.float16)\n",
    "    elif train[col].dtype == 'int64':\n",
    "        train[col] = train[col].astype(np.int16)\n",
    "\n",
    "  # train['result'] = train['result'].astype(np.int8)\n",
    "\n",
    "  obj_name = [x for x in train.columns if train_[x].dtype == 'object']\n",
    "\n",
    "  for col in obj_name:\n",
    "    train[col] = enc.transform(train[col])\n",
    "\n",
    "  for col in obj_name:\n",
    "    train[col] = train[col].astype(np.int8)\n",
    "\n",
    "  return train\n",
    "\n",
    "def cross_validate(model, X, y, split = 3):\n",
    "   skf = StratifiedKFold(n_splits=split)\n",
    "   models = []\n",
    "   scores = []\n",
    "   for i, (train_idx, test_idx) in enumerate(skf.split(X, y)):\n",
    "        X_train, X_val, y_train, y_val = X.iloc[train_idx], X.iloc[test_idx], y.iloc[train_idx], y.iloc[test_idx]\n",
    "\n",
    "        model.fit(X_train, y_train)\n",
    "        score = f1_score(model.predict(X_val), y_val, average = 'micro')\n",
    "        scores.append(score)\n",
    "        models.append(model)\n",
    "        print(score)\n",
    "   print(np.mean(scores), np.std(scores))\n",
    "   return models\n",
    "\n",
    "def pred_cross(models, X):\n",
    "  preds = [mode.predict(X) for mode in models]\n",
    "  res = []\n",
    "  for i in range(len(preds[0])):\n",
    "     pr = [pred[i] for pred in preds]\n",
    "     res.append(int(stats.mode(pr)[0][0]))\n",
    "  return res\n",
    "\n",
    "def pred_proba(models, X):\n",
    "  res = [model.predict_proba(X) for model in models]\n",
    "  return np.sum(res, axis=0)\n",
    "\n",
    "def objective(trial):\n",
    "\n",
    "    param = {\n",
    "        \"objective\": trial.suggest_categorical(\"objective\", [\"Logloss\", \"CrossEntropy\"]),\n",
    "        \"colsample_bylevel\": trial.suggest_float(\"colsample_bylevel\", 0.01, 0.1),\n",
    "        \"depth\": trial.suggest_int(\"depth\", 1, 12),\n",
    "        \"boosting_type\": trial.suggest_categorical(\"boosting_type\", [\"Ordered\", \"Plain\"]),\n",
    "        \"bootstrap_type\": trial.suggest_categorical(\n",
    "            \"bootstrap_type\", [\"Bayesian\", \"Bernoulli\", \"MVS\"]\n",
    "        ),\n",
    "        \"used_ram_limit\": \"3gb\",\n",
    "    }\n",
    "\n",
    "    if param[\"bootstrap_type\"] == \"Bayesian\":\n",
    "        param[\"bagging_temperature\"] = trial.suggest_float(\"bagging_temperature\", 0, 10)\n",
    "    elif param[\"bootstrap_type\"] == \"Bernoulli\":\n",
    "        param[\"subsample\"] = trial.suggest_float(\"subsample\", 0.1, 1)\n",
    "\n",
    "    gbm = cb.CatBoostClassifier(**param)\n",
    "\n",
    "    gbm.fit(X, y, eval_set=[(X_test, y_test)], verbose=0, early_stopping_rounds=100)\n",
    "\n",
    "    preds = gbm.predict(valid_x)\n",
    "    pred_labels = np.rint(preds)\n",
    "    f1 = f1_score(y_test, pred_labels, average = 'micro')\n",
    "    return f1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "9BfVgwZjmlJP"
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('train.csv')\n",
    "test = pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 544
    },
    "id": "fcccOMx30Wqb",
    "outputId": "039d15e9-6751-4d1e-c578-0ce3746c4a2c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-9310c276-b0bb-4a46-af7a-ba58e5c6b32e\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rsi_sig</th>\n",
       "      <th>vwap_short</th>\n",
       "      <th>resist3</th>\n",
       "      <th>stoch_k</th>\n",
       "      <th>vwap_long</th>\n",
       "      <th>support3</th>\n",
       "      <th>fibo_sig</th>\n",
       "      <th>result</th>\n",
       "      <th>stoch_k_sm</th>\n",
       "      <th>boll_up</th>\n",
       "      <th>...</th>\n",
       "      <th>support2</th>\n",
       "      <th>atr</th>\n",
       "      <th>resist1</th>\n",
       "      <th>ema_rel</th>\n",
       "      <th>support1</th>\n",
       "      <th>ichi_base</th>\n",
       "      <th>exch</th>\n",
       "      <th>resist2</th>\n",
       "      <th>ichi_b</th>\n",
       "      <th>macd_hist_rel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hold</td>\n",
       "      <td>3.135142e-04</td>\n",
       "      <td>32.11</td>\n",
       "      <td>5.115713</td>\n",
       "      <td>-9.398346e-05</td>\n",
       "      <td>-24.93</td>\n",
       "      <td>Sell</td>\n",
       "      <td>0</td>\n",
       "      <td>41.644171</td>\n",
       "      <td>0.005576</td>\n",
       "      <td>...</td>\n",
       "      <td>-10.67</td>\n",
       "      <td>0.002527</td>\n",
       "      <td>9.50</td>\n",
       "      <td>1.026437</td>\n",
       "      <td>-4.76</td>\n",
       "      <td>2.722192</td>\n",
       "      <td>BC</td>\n",
       "      <td>17.85</td>\n",
       "      <td>5.110871</td>\n",
       "      <td>-1.027237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sell</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>5.60</td>\n",
       "      <td>85.714286</td>\n",
       "      <td>1.585063e-06</td>\n",
       "      <td>-6.44</td>\n",
       "      <td>Buy</td>\n",
       "      <td>1</td>\n",
       "      <td>113.015873</td>\n",
       "      <td>0.017626</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.43</td>\n",
       "      <td>0.000207</td>\n",
       "      <td>1.37</td>\n",
       "      <td>0.995089</td>\n",
       "      <td>-1.64</td>\n",
       "      <td>-1.103310</td>\n",
       "      <td>BB</td>\n",
       "      <td>2.59</td>\n",
       "      <td>-0.451354</td>\n",
       "      <td>-0.993209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Hold</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.30</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-1.30</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>46.666667</td>\n",
       "      <td>0.002156</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.65</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.28</td>\n",
       "      <td>1.000046</td>\n",
       "      <td>-0.37</td>\n",
       "      <td>-0.061000</td>\n",
       "      <td>BB</td>\n",
       "      <td>0.65</td>\n",
       "      <td>-0.020333</td>\n",
       "      <td>-0.999840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hold</td>\n",
       "      <td>-8.791675e-05</td>\n",
       "      <td>2.30</td>\n",
       "      <td>71.428571</td>\n",
       "      <td>-3.290121e-07</td>\n",
       "      <td>-2.27</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>114.920635</td>\n",
       "      <td>0.004187</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.13</td>\n",
       "      <td>0.002067</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0.999847</td>\n",
       "      <td>-0.54</td>\n",
       "      <td>-0.204248</td>\n",
       "      <td>BC</td>\n",
       "      <td>1.16</td>\n",
       "      <td>-0.040850</td>\n",
       "      <td>-0.999806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Buy</td>\n",
       "      <td>-3.337844e-06</td>\n",
       "      <td>1.37</td>\n",
       "      <td>9.090909</td>\n",
       "      <td>-3.157212e-07</td>\n",
       "      <td>-1.03</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>37.272727</td>\n",
       "      <td>0.000846</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.43</td>\n",
       "      <td>0.000187</td>\n",
       "      <td>0.45</td>\n",
       "      <td>1.000930</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>0.168413</td>\n",
       "      <td>OK</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.168413</td>\n",
       "      <td>-1.001124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Hold</td>\n",
       "      <td>-4.670043e-07</td>\n",
       "      <td>26.19</td>\n",
       "      <td>18.518519</td>\n",
       "      <td>8.090406e-08</td>\n",
       "      <td>-35.11</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>48.319745</td>\n",
       "      <td>0.041851</td>\n",
       "      <td>...</td>\n",
       "      <td>-19.78</td>\n",
       "      <td>0.000091</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>1.001646</td>\n",
       "      <td>-15.40</td>\n",
       "      <td>0.753111</td>\n",
       "      <td>BB</td>\n",
       "      <td>10.87</td>\n",
       "      <td>-6.974460</td>\n",
       "      <td>-1.002422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Hold</td>\n",
       "      <td>8.296672e-07</td>\n",
       "      <td>3.67</td>\n",
       "      <td>77.500000</td>\n",
       "      <td>-1.352145e-07</td>\n",
       "      <td>-3.44</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>116.012266</td>\n",
       "      <td>0.006839</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.66</td>\n",
       "      <td>0.000987</td>\n",
       "      <td>1.21</td>\n",
       "      <td>0.999231</td>\n",
       "      <td>-0.57</td>\n",
       "      <td>-0.349783</td>\n",
       "      <td>OK</td>\n",
       "      <td>1.89</td>\n",
       "      <td>0.406504</td>\n",
       "      <td>-0.998227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Hold</td>\n",
       "      <td>-1.949219e-06</td>\n",
       "      <td>0.55</td>\n",
       "      <td>61.111111</td>\n",
       "      <td>5.358238e-06</td>\n",
       "      <td>-0.84</td>\n",
       "      <td>Buy</td>\n",
       "      <td>1</td>\n",
       "      <td>88.359751</td>\n",
       "      <td>0.001617</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.49</td>\n",
       "      <td>0.000085</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.999871</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>-0.096342</td>\n",
       "      <td>OK</td>\n",
       "      <td>0.20</td>\n",
       "      <td>-0.142290</td>\n",
       "      <td>-0.999576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Hold</td>\n",
       "      <td>-3.442082e-04</td>\n",
       "      <td>2.30</td>\n",
       "      <td>91.666667</td>\n",
       "      <td>9.068477e-06</td>\n",
       "      <td>-2.69</td>\n",
       "      <td>Buy</td>\n",
       "      <td>1</td>\n",
       "      <td>126.444444</td>\n",
       "      <td>0.004664</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.44</td>\n",
       "      <td>0.002667</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.999083</td>\n",
       "      <td>-0.76</td>\n",
       "      <td>-0.207900</td>\n",
       "      <td>BC</td>\n",
       "      <td>1.06</td>\n",
       "      <td>-0.187110</td>\n",
       "      <td>-0.999324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Hold</td>\n",
       "      <td>-8.746794e-05</td>\n",
       "      <td>3.15</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.137222e-04</td>\n",
       "      <td>-2.59</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>42.370370</td>\n",
       "      <td>0.002732</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.15</td>\n",
       "      <td>0.007333</td>\n",
       "      <td>0.81</td>\n",
       "      <td>1.001865</td>\n",
       "      <td>-0.63</td>\n",
       "      <td>0.270479</td>\n",
       "      <td>BC</td>\n",
       "      <td>1.72</td>\n",
       "      <td>0.551998</td>\n",
       "      <td>-1.001881</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 39 columns</p>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9310c276-b0bb-4a46-af7a-ba58e5c6b32e')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-9310c276-b0bb-4a46-af7a-ba58e5c6b32e button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-9310c276-b0bb-4a46-af7a-ba58e5c6b32e');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "<div id=\"df-5b7fd641-149c-4d42-9328-67325931012e\">\n",
       "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5b7fd641-149c-4d42-9328-67325931012e')\"\n",
       "            title=\"Suggest charts.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "  </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "  <script>\n",
       "    async function quickchart(key) {\n",
       "      const quickchartButtonEl =\n",
       "        document.querySelector('#' + key + ' button');\n",
       "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "      try {\n",
       "        const charts = await google.colab.kernel.invokeFunction(\n",
       "            'suggestCharts', [key], {});\n",
       "      } catch (error) {\n",
       "        console.error('Error during call to suggestCharts:', error);\n",
       "      }\n",
       "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "    }\n",
       "    (() => {\n",
       "      let quickchartButtonEl =\n",
       "        document.querySelector('#df-5b7fd641-149c-4d42-9328-67325931012e button');\n",
       "      quickchartButtonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "    })();\n",
       "  </script>\n",
       "</div>\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "  rsi_sig    vwap_short  resist3    stoch_k     vwap_long  support3 fibo_sig  \\\n",
       "0    Hold  3.135142e-04    32.11   5.115713 -9.398346e-05    -24.93     Sell   \n",
       "1    Sell  0.000000e+00     5.60  85.714286  1.585063e-06     -6.44      Buy   \n",
       "2    Hold  0.000000e+00     1.30  50.000000  0.000000e+00     -1.30     Sell   \n",
       "3    Hold -8.791675e-05     2.30  71.428571 -3.290121e-07     -2.27     Sell   \n",
       "4     Buy -3.337844e-06     1.37   9.090909 -3.157212e-07     -1.03     Sell   \n",
       "5    Hold -4.670043e-07    26.19  18.518519  8.090406e-08    -35.11     Sell   \n",
       "6    Hold  8.296672e-07     3.67  77.500000 -1.352145e-07     -3.44     Sell   \n",
       "7    Hold -1.949219e-06     0.55  61.111111  5.358238e-06     -0.84      Buy   \n",
       "8    Hold -3.442082e-04     2.30  91.666667  9.068477e-06     -2.69      Buy   \n",
       "9    Hold -8.746794e-05     3.15   0.000000 -1.137222e-04     -2.59     Sell   \n",
       "\n",
       "   result  stoch_k_sm   boll_up  ...  support2       atr  resist1   ema_rel  \\\n",
       "0       0   41.644171  0.005576  ...    -10.67  0.002527     9.50  1.026437   \n",
       "1       1  113.015873  0.017626  ...     -3.43  0.000207     1.37  0.995089   \n",
       "2       1   46.666667  0.002156  ...     -0.65  0.000005     0.28  1.000046   \n",
       "3       1  114.920635  0.004187  ...     -1.13  0.002067     0.60  0.999847   \n",
       "4       1   37.272727  0.000846  ...     -0.43  0.000187     0.45  1.000930   \n",
       "5       1   48.319745  0.041851  ...    -19.78  0.000091    -0.08  1.001646   \n",
       "6       1  116.012266  0.006839  ...     -1.66  0.000987     1.21  0.999231   \n",
       "7       1   88.359751  0.001617  ...     -0.49  0.000085     0.02  0.999871   \n",
       "8       1  126.444444  0.004664  ...     -1.44  0.002667     0.49  0.999083   \n",
       "9       1   42.370370  0.002732  ...     -1.15  0.007333     0.81  1.001865   \n",
       "\n",
       "   support1  ichi_base  exch  resist2    ichi_b  macd_hist_rel  \n",
       "0     -4.76   2.722192    BC    17.85  5.110871      -1.027237  \n",
       "1     -1.64  -1.103310    BB     2.59 -0.451354      -0.993209  \n",
       "2     -0.37  -0.061000    BB     0.65 -0.020333      -0.999840  \n",
       "3     -0.54  -0.204248    BC     1.16 -0.040850      -0.999806  \n",
       "4     -0.15   0.168413    OK     0.77  0.168413      -1.001124  \n",
       "5    -15.40   0.753111    BB    10.87 -6.974460      -1.002422  \n",
       "6     -0.57  -0.349783    OK     1.89  0.406504      -0.998227  \n",
       "7     -0.33  -0.096342    OK     0.20 -0.142290      -0.999576  \n",
       "8     -0.76  -0.207900    BC     1.06 -0.187110      -0.999324  \n",
       "9     -0.63   0.270479    BC     1.72  0.551998      -1.001881  \n",
       "\n",
       "[10 rows x 39 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rv1Q1Kf30d58",
    "outputId": "0c19e81c-4cc8-4878-fdbf-445e6f943039"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1366032 entries, 0 to 1366031\n",
      "Data columns (total 39 columns):\n",
      " #   Column         Non-Null Count    Dtype  \n",
      "---  ------         --------------    -----  \n",
      " 0   rsi_sig        1366032 non-null  object \n",
      " 1   vwap_short     1366032 non-null  float64\n",
      " 2   resist3        1366032 non-null  float64\n",
      " 3   stoch_k        1366032 non-null  float64\n",
      " 4   vwap_long      1366032 non-null  float64\n",
      " 5   support3       1366032 non-null  float64\n",
      " 6   fibo_sig       1366032 non-null  object \n",
      " 7   result         1366032 non-null  int64  \n",
      " 8   stoch_k_sm     1366032 non-null  float64\n",
      " 9   boll_up        1366032 non-null  float64\n",
      " 10  stoch_d        1366032 non-null  float64\n",
      " 11  ichi_sig       1366032 non-null  object \n",
      " 12  boll_low       1366032 non-null  float64\n",
      " 13  stoch_sig      1366032 non-null  object \n",
      " 14  macd_rel       1366032 non-null  float64\n",
      " 15  pivot_pt       1366032 non-null  float64\n",
      " 16  macd_sig_rel   1366032 non-null  float64\n",
      " 17  wma_rel        1366032 non-null  float64\n",
      " 18  stoch_sig_val  1366032 non-null  float64\n",
      " 19  s&p500         1366032 non-null  float64\n",
      " 20  ichi_a         1366032 non-null  float64\n",
      " 21  boll_sig       1366032 non-null  object \n",
      " 22  adx            1366032 non-null  float64\n",
      " 23  ichi_conv      1366032 non-null  float64\n",
      " 24  ma_rel         1366032 non-null  float64\n",
      " 25  sma_rel        1366032 non-null  float64\n",
      " 26  rsi            1366032 non-null  float64\n",
      " 27  sar_rel        1366032 non-null  float64\n",
      " 28  macd           1366032 non-null  float64\n",
      " 29  support2       1366032 non-null  float64\n",
      " 30  atr            1366032 non-null  float64\n",
      " 31  resist1        1366032 non-null  float64\n",
      " 32  ema_rel        1366032 non-null  float64\n",
      " 33  support1       1366032 non-null  float64\n",
      " 34  ichi_base      1366032 non-null  float64\n",
      " 35  exch           1366032 non-null  object \n",
      " 36  resist2        1366032 non-null  float64\n",
      " 37  ichi_b         1366032 non-null  float64\n",
      " 38  macd_hist_rel  1366032 non-null  float64\n",
      "dtypes: float64(32), int64(1), object(6)\n",
      "memory usage: 406.5+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Перевожу в pickle для быстродействия"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "SIzpuHFW13GW"
   },
   "outputs": [],
   "source": [
    "pd.to_pickle(train, 'train_.pickle')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "otqQgz8v2JtZ"
   },
   "outputs": [],
   "source": [
    "train_ = pd.read_pickle('train_.pickle')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Так как данные разнообразные, переведу в менее тяжялые типы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ZnxrS0i97NQV"
   },
   "outputs": [],
   "source": [
    "for col in train_.columns:\n",
    "  if train_[col].dtype == 'float64':\n",
    "     train_[col] = train_[col].astype(np.float16)\n",
    "  elif train_[col].dtype == 'int64':\n",
    "      train_[col] = train_[col].astype(np.int16)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Проверил на пропуски"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "v_ODOxIk9mNR",
    "outputId": "84f796c9-58bf-4cb3-9f71-26fdc0f2dd43"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rsi_sig          0\n",
       "vwap_short       0\n",
       "resist3          0\n",
       "stoch_k          0\n",
       "vwap_long        0\n",
       "support3         0\n",
       "fibo_sig         0\n",
       "result           0\n",
       "stoch_k_sm       0\n",
       "boll_up          0\n",
       "stoch_d          0\n",
       "ichi_sig         0\n",
       "boll_low         0\n",
       "stoch_sig        0\n",
       "macd_rel         0\n",
       "pivot_pt         0\n",
       "macd_sig_rel     0\n",
       "wma_rel          0\n",
       "stoch_sig_val    0\n",
       "s&p500           0\n",
       "ichi_a           0\n",
       "boll_sig         0\n",
       "adx              0\n",
       "ichi_conv        0\n",
       "ma_rel           0\n",
       "sma_rel          0\n",
       "rsi              0\n",
       "sar_rel          0\n",
       "macd             0\n",
       "support2         0\n",
       "atr              0\n",
       "resist1          0\n",
       "ema_rel          0\n",
       "support1         0\n",
       "ichi_base        0\n",
       "exch             0\n",
       "resist2          0\n",
       "ichi_b           0\n",
       "macd_hist_rel    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_.isnull().sum()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Перевел целевую переменную в int, чтобы меньше весила"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "T2Cig0Af-0Sn"
   },
   "outputs": [],
   "source": [
    "train_['result'] = train_['result'].astype(np.int8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 544
    },
    "id": "M6YCkLE2Bhab",
    "outputId": "1d3ab37a-9661-43dc-e36f-fcabc6861a7e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-3ebac1d5-ff11-41a3-a67e-16801d927ff0\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rsi_sig</th>\n",
       "      <th>vwap_short</th>\n",
       "      <th>resist3</th>\n",
       "      <th>stoch_k</th>\n",
       "      <th>vwap_long</th>\n",
       "      <th>support3</th>\n",
       "      <th>fibo_sig</th>\n",
       "      <th>result</th>\n",
       "      <th>stoch_k_sm</th>\n",
       "      <th>boll_up</th>\n",
       "      <th>...</th>\n",
       "      <th>support2</th>\n",
       "      <th>atr</th>\n",
       "      <th>resist1</th>\n",
       "      <th>ema_rel</th>\n",
       "      <th>support1</th>\n",
       "      <th>ichi_base</th>\n",
       "      <th>exch</th>\n",
       "      <th>resist2</th>\n",
       "      <th>ichi_b</th>\n",
       "      <th>macd_hist_rel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hold</td>\n",
       "      <td>3.135204e-04</td>\n",
       "      <td>32.125000</td>\n",
       "      <td>5.117188</td>\n",
       "      <td>-9.399652e-05</td>\n",
       "      <td>-24.937500</td>\n",
       "      <td>Sell</td>\n",
       "      <td>0</td>\n",
       "      <td>41.65625</td>\n",
       "      <td>0.005577</td>\n",
       "      <td>...</td>\n",
       "      <td>-10.671875</td>\n",
       "      <td>0.002527</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>1.026367</td>\n",
       "      <td>-4.761719</td>\n",
       "      <td>2.722656</td>\n",
       "      <td>BC</td>\n",
       "      <td>17.843750</td>\n",
       "      <td>5.109375</td>\n",
       "      <td>-1.027344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sell</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>5.601562</td>\n",
       "      <td>85.687500</td>\n",
       "      <td>1.609325e-06</td>\n",
       "      <td>-6.441406</td>\n",
       "      <td>Buy</td>\n",
       "      <td>1</td>\n",
       "      <td>113.00000</td>\n",
       "      <td>0.017624</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.429688</td>\n",
       "      <td>0.000207</td>\n",
       "      <td>1.370117</td>\n",
       "      <td>0.995117</td>\n",
       "      <td>-1.639648</td>\n",
       "      <td>-1.103516</td>\n",
       "      <td>BB</td>\n",
       "      <td>2.589844</td>\n",
       "      <td>-0.451416</td>\n",
       "      <td>-0.993164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Hold</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.299805</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-1.299805</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>46.65625</td>\n",
       "      <td>0.002155</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.649902</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.280029</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.370117</td>\n",
       "      <td>-0.061005</td>\n",
       "      <td>BB</td>\n",
       "      <td>0.649902</td>\n",
       "      <td>-0.020340</td>\n",
       "      <td>-1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hold</td>\n",
       "      <td>-8.791685e-05</td>\n",
       "      <td>2.300781</td>\n",
       "      <td>71.437500</td>\n",
       "      <td>-3.576279e-07</td>\n",
       "      <td>-2.269531</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>114.93750</td>\n",
       "      <td>0.004189</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.129883</td>\n",
       "      <td>0.002068</td>\n",
       "      <td>0.600098</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.540039</td>\n",
       "      <td>-0.204224</td>\n",
       "      <td>BC</td>\n",
       "      <td>1.160156</td>\n",
       "      <td>-0.040863</td>\n",
       "      <td>-1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Buy</td>\n",
       "      <td>-3.337860e-06</td>\n",
       "      <td>1.370117</td>\n",
       "      <td>9.093750</td>\n",
       "      <td>-2.980232e-07</td>\n",
       "      <td>-1.030273</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>37.28125</td>\n",
       "      <td>0.000846</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.429932</td>\n",
       "      <td>0.000187</td>\n",
       "      <td>0.449951</td>\n",
       "      <td>1.000977</td>\n",
       "      <td>-0.150024</td>\n",
       "      <td>0.168457</td>\n",
       "      <td>OK</td>\n",
       "      <td>0.770020</td>\n",
       "      <td>0.168457</td>\n",
       "      <td>-1.000977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Hold</td>\n",
       "      <td>-4.768372e-07</td>\n",
       "      <td>26.187500</td>\n",
       "      <td>18.515625</td>\n",
       "      <td>5.960464e-08</td>\n",
       "      <td>-35.125000</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>48.31250</td>\n",
       "      <td>0.041840</td>\n",
       "      <td>...</td>\n",
       "      <td>-19.781250</td>\n",
       "      <td>0.000091</td>\n",
       "      <td>-0.080017</td>\n",
       "      <td>1.001953</td>\n",
       "      <td>-15.398438</td>\n",
       "      <td>0.752930</td>\n",
       "      <td>BB</td>\n",
       "      <td>10.867188</td>\n",
       "      <td>-6.972656</td>\n",
       "      <td>-1.001953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Hold</td>\n",
       "      <td>8.344650e-07</td>\n",
       "      <td>3.669922</td>\n",
       "      <td>77.500000</td>\n",
       "      <td>-1.192093e-07</td>\n",
       "      <td>-3.439453</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>116.00000</td>\n",
       "      <td>0.006840</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.660156</td>\n",
       "      <td>0.000987</td>\n",
       "      <td>1.209961</td>\n",
       "      <td>0.999023</td>\n",
       "      <td>-0.569824</td>\n",
       "      <td>-0.349854</td>\n",
       "      <td>OK</td>\n",
       "      <td>1.889648</td>\n",
       "      <td>0.406494</td>\n",
       "      <td>-0.998047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Hold</td>\n",
       "      <td>-1.966953e-06</td>\n",
       "      <td>0.549805</td>\n",
       "      <td>61.125000</td>\n",
       "      <td>5.364418e-06</td>\n",
       "      <td>-0.839844</td>\n",
       "      <td>Buy</td>\n",
       "      <td>1</td>\n",
       "      <td>88.37500</td>\n",
       "      <td>0.001616</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.489990</td>\n",
       "      <td>0.000085</td>\n",
       "      <td>0.020004</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.330078</td>\n",
       "      <td>-0.096313</td>\n",
       "      <td>OK</td>\n",
       "      <td>0.199951</td>\n",
       "      <td>-0.142334</td>\n",
       "      <td>-0.999512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Hold</td>\n",
       "      <td>-3.442764e-04</td>\n",
       "      <td>2.300781</td>\n",
       "      <td>91.687500</td>\n",
       "      <td>9.059906e-06</td>\n",
       "      <td>-2.689453</td>\n",
       "      <td>Buy</td>\n",
       "      <td>1</td>\n",
       "      <td>126.43750</td>\n",
       "      <td>0.004665</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.440430</td>\n",
       "      <td>0.002666</td>\n",
       "      <td>0.489990</td>\n",
       "      <td>0.999023</td>\n",
       "      <td>-0.759766</td>\n",
       "      <td>-0.207886</td>\n",
       "      <td>BC</td>\n",
       "      <td>1.059570</td>\n",
       "      <td>-0.187134</td>\n",
       "      <td>-0.999512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Hold</td>\n",
       "      <td>-8.744001e-05</td>\n",
       "      <td>3.150391</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.137257e-04</td>\n",
       "      <td>-2.589844</td>\n",
       "      <td>Sell</td>\n",
       "      <td>1</td>\n",
       "      <td>42.37500</td>\n",
       "      <td>0.002731</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.150391</td>\n",
       "      <td>0.007332</td>\n",
       "      <td>0.810059</td>\n",
       "      <td>1.001953</td>\n",
       "      <td>-0.629883</td>\n",
       "      <td>0.270508</td>\n",
       "      <td>BC</td>\n",
       "      <td>1.719727</td>\n",
       "      <td>0.551758</td>\n",
       "      <td>-1.001953</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 39 columns</p>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ebac1d5-ff11-41a3-a67e-16801d927ff0')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-3ebac1d5-ff11-41a3-a67e-16801d927ff0 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-3ebac1d5-ff11-41a3-a67e-16801d927ff0');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "<div id=\"df-e759f8b8-3953-438d-bc45-a1fd860d3ce2\">\n",
       "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e759f8b8-3953-438d-bc45-a1fd860d3ce2')\"\n",
       "            title=\"Suggest charts.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "  </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "  <script>\n",
       "    async function quickchart(key) {\n",
       "      const quickchartButtonEl =\n",
       "        document.querySelector('#' + key + ' button');\n",
       "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "      try {\n",
       "        const charts = await google.colab.kernel.invokeFunction(\n",
       "            'suggestCharts', [key], {});\n",
       "      } catch (error) {\n",
       "        console.error('Error during call to suggestCharts:', error);\n",
       "      }\n",
       "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "    }\n",
       "    (() => {\n",
       "      let quickchartButtonEl =\n",
       "        document.querySelector('#df-e759f8b8-3953-438d-bc45-a1fd860d3ce2 button');\n",
       "      quickchartButtonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "    })();\n",
       "  </script>\n",
       "</div>\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "  rsi_sig    vwap_short    resist3    stoch_k     vwap_long   support3  \\\n",
       "0    Hold  3.135204e-04  32.125000   5.117188 -9.399652e-05 -24.937500   \n",
       "1    Sell  0.000000e+00   5.601562  85.687500  1.609325e-06  -6.441406   \n",
       "2    Hold  0.000000e+00   1.299805  50.000000  0.000000e+00  -1.299805   \n",
       "3    Hold -8.791685e-05   2.300781  71.437500 -3.576279e-07  -2.269531   \n",
       "4     Buy -3.337860e-06   1.370117   9.093750 -2.980232e-07  -1.030273   \n",
       "5    Hold -4.768372e-07  26.187500  18.515625  5.960464e-08 -35.125000   \n",
       "6    Hold  8.344650e-07   3.669922  77.500000 -1.192093e-07  -3.439453   \n",
       "7    Hold -1.966953e-06   0.549805  61.125000  5.364418e-06  -0.839844   \n",
       "8    Hold -3.442764e-04   2.300781  91.687500  9.059906e-06  -2.689453   \n",
       "9    Hold -8.744001e-05   3.150391   0.000000 -1.137257e-04  -2.589844   \n",
       "\n",
       "  fibo_sig  result  stoch_k_sm   boll_up  ...   support2       atr   resist1  \\\n",
       "0     Sell       0    41.65625  0.005577  ... -10.671875  0.002527  9.500000   \n",
       "1      Buy       1   113.00000  0.017624  ...  -3.429688  0.000207  1.370117   \n",
       "2     Sell       1    46.65625  0.002155  ...  -0.649902  0.000005  0.280029   \n",
       "3     Sell       1   114.93750  0.004189  ...  -1.129883  0.002068  0.600098   \n",
       "4     Sell       1    37.28125  0.000846  ...  -0.429932  0.000187  0.449951   \n",
       "5     Sell       1    48.31250  0.041840  ... -19.781250  0.000091 -0.080017   \n",
       "6     Sell       1   116.00000  0.006840  ...  -1.660156  0.000987  1.209961   \n",
       "7      Buy       1    88.37500  0.001616  ...  -0.489990  0.000085  0.020004   \n",
       "8      Buy       1   126.43750  0.004665  ...  -1.440430  0.002666  0.489990   \n",
       "9     Sell       1    42.37500  0.002731  ...  -1.150391  0.007332  0.810059   \n",
       "\n",
       "    ema_rel   support1  ichi_base  exch    resist2    ichi_b  macd_hist_rel  \n",
       "0  1.026367  -4.761719   2.722656    BC  17.843750  5.109375      -1.027344  \n",
       "1  0.995117  -1.639648  -1.103516    BB   2.589844 -0.451416      -0.993164  \n",
       "2  1.000000  -0.370117  -0.061005    BB   0.649902 -0.020340      -1.000000  \n",
       "3  1.000000  -0.540039  -0.204224    BC   1.160156 -0.040863      -1.000000  \n",
       "4  1.000977  -0.150024   0.168457    OK   0.770020  0.168457      -1.000977  \n",
       "5  1.001953 -15.398438   0.752930    BB  10.867188 -6.972656      -1.001953  \n",
       "6  0.999023  -0.569824  -0.349854    OK   1.889648  0.406494      -0.998047  \n",
       "7  1.000000  -0.330078  -0.096313    OK   0.199951 -0.142334      -0.999512  \n",
       "8  0.999023  -0.759766  -0.207886    BC   1.059570 -0.187134      -0.999512  \n",
       "9  1.001953  -0.629883   0.270508    BC   1.719727  0.551758      -1.001953  \n",
       "\n",
       "[10 rows x 39 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_.head(10)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Собираю object колонки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "M4FPtm0rBwO-"
   },
   "outputs": [],
   "source": [
    "obj_name = [x for x in train_.columns if train_[x].dtype == 'object']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 419
    },
    "id": "9ztIs2OlD8JT",
    "outputId": "7e2d2908-1885-4cab-db5b-8e991e0d4fa9"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-42ba47e0-3639-42cb-a9c2-73d9245fcfed\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rsi_sig</th>\n",
       "      <th>fibo_sig</th>\n",
       "      <th>ichi_sig</th>\n",
       "      <th>stoch_sig</th>\n",
       "      <th>boll_sig</th>\n",
       "      <th>exch</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hold</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Hold</td>\n",
       "      <td>BC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sell</td>\n",
       "      <td>Buy</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Hold</td>\n",
       "      <td>BB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Hold</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Buy</td>\n",
       "      <td>Hold</td>\n",
       "      <td>BB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hold</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Buy</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Hold</td>\n",
       "      <td>BC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Buy</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Buy</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Hold</td>\n",
       "      <td>OK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366027</th>\n",
       "      <td>Hold</td>\n",
       "      <td>Buy</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Hold</td>\n",
       "      <td>OK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366028</th>\n",
       "      <td>Hold</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Hold</td>\n",
       "      <td>BC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366029</th>\n",
       "      <td>Hold</td>\n",
       "      <td>Buy</td>\n",
       "      <td>Buy</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Hold</td>\n",
       "      <td>OK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366030</th>\n",
       "      <td>Hold</td>\n",
       "      <td>Buy</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Hold</td>\n",
       "      <td>HB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366031</th>\n",
       "      <td>Sell</td>\n",
       "      <td>Buy</td>\n",
       "      <td>Buy</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Sell</td>\n",
       "      <td>HB</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1366032 rows × 6 columns</p>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42ba47e0-3639-42cb-a9c2-73d9245fcfed')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-42ba47e0-3639-42cb-a9c2-73d9245fcfed button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-42ba47e0-3639-42cb-a9c2-73d9245fcfed');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "<div id=\"df-9675fb0b-1b0c-409d-a5dd-7547b7e8f758\">\n",
       "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9675fb0b-1b0c-409d-a5dd-7547b7e8f758')\"\n",
       "            title=\"Suggest charts.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "  </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "  <script>\n",
       "    async function quickchart(key) {\n",
       "      const quickchartButtonEl =\n",
       "        document.querySelector('#' + key + ' button');\n",
       "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "      try {\n",
       "        const charts = await google.colab.kernel.invokeFunction(\n",
       "            'suggestCharts', [key], {});\n",
       "      } catch (error) {\n",
       "        console.error('Error during call to suggestCharts:', error);\n",
       "      }\n",
       "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "    }\n",
       "    (() => {\n",
       "      let quickchartButtonEl =\n",
       "        document.querySelector('#df-9675fb0b-1b0c-409d-a5dd-7547b7e8f758 button');\n",
       "      quickchartButtonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "    })();\n",
       "  </script>\n",
       "</div>\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "        rsi_sig fibo_sig ichi_sig stoch_sig boll_sig exch\n",
       "0          Hold     Sell     Sell      Sell     Hold   BC\n",
       "1          Sell      Buy     Sell      Sell     Hold   BB\n",
       "2          Hold     Sell     Sell       Buy     Hold   BB\n",
       "3          Hold     Sell      Buy      Sell     Hold   BC\n",
       "4           Buy     Sell      Buy      Sell     Hold   OK\n",
       "...         ...      ...      ...       ...      ...  ...\n",
       "1366027    Hold      Buy     Sell      Sell     Hold   OK\n",
       "1366028    Hold     Sell     Sell      Sell     Hold   BC\n",
       "1366029    Hold      Buy      Buy      Sell     Hold   OK\n",
       "1366030    Hold      Buy     Sell      Sell     Hold   HB\n",
       "1366031    Sell      Buy      Buy      Sell     Sell   HB\n",
       "\n",
       "[1366032 rows x 6 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_[obj_name]"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Смотрю в них на количество уникальных значений"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "c3c7l9QBDqfm",
    "outputId": "4e044782-4802-43d0-a94b-996ec05a5ee0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rsi_sig      3\n",
       "fibo_sig     3\n",
       "ichi_sig     3\n",
       "stoch_sig    3\n",
       "boll_sig     3\n",
       "exch         4\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_[obj_name].nunique()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Использую ordinal encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "5cLsFFzfFrVy"
   },
   "outputs": [],
   "source": [
    "enc = OrdinalEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 74
    },
    "id": "aX45giHLEbzh",
    "outputId": "647d0967-a295-4cf4-c5a5-9ba8cf13c117"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>OrdinalEncoder()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OrdinalEncoder</label><div class=\"sk-toggleable__content\"><pre>OrdinalEncoder()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "OrdinalEncoder()"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "enc.fit(train_[obj_name])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iV-dixf8TGb4"
   },
   "outputs": [],
   "source": [
    "train_[obj_name]= enc.transform(train_[obj_name])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 609
    },
    "id": "UO_NHwkSQyxE",
    "outputId": "6e37b958-6a68-4d53-eba2-9a495c262cf5"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-9343c1c4-d3d2-483f-9b55-52c3d62c06c3\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rsi_sig</th>\n",
       "      <th>vwap_short</th>\n",
       "      <th>resist3</th>\n",
       "      <th>stoch_k</th>\n",
       "      <th>vwap_long</th>\n",
       "      <th>support3</th>\n",
       "      <th>fibo_sig</th>\n",
       "      <th>result</th>\n",
       "      <th>stoch_k_sm</th>\n",
       "      <th>boll_up</th>\n",
       "      <th>...</th>\n",
       "      <th>support2</th>\n",
       "      <th>atr</th>\n",
       "      <th>resist1</th>\n",
       "      <th>ema_rel</th>\n",
       "      <th>support1</th>\n",
       "      <th>ichi_base</th>\n",
       "      <th>exch</th>\n",
       "      <th>resist2</th>\n",
       "      <th>ichi_b</th>\n",
       "      <th>macd_hist_rel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000314</td>\n",
       "      <td>32.125000</td>\n",
       "      <td>5.117188</td>\n",
       "      <td>-9.399652e-05</td>\n",
       "      <td>-24.937500</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>41.65625</td>\n",
       "      <td>0.005577</td>\n",
       "      <td>...</td>\n",
       "      <td>-10.671875</td>\n",
       "      <td>2.527237e-03</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>1.026367</td>\n",
       "      <td>-4.761719</td>\n",
       "      <td>2.722656</td>\n",
       "      <td>1.0</td>\n",
       "      <td>17.843750</td>\n",
       "      <td>5.109375</td>\n",
       "      <td>-1.027344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.601562</td>\n",
       "      <td>85.687500</td>\n",
       "      <td>1.609325e-06</td>\n",
       "      <td>-6.441406</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>113.00000</td>\n",
       "      <td>0.017624</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.429688</td>\n",
       "      <td>2.067089e-04</td>\n",
       "      <td>1.370117</td>\n",
       "      <td>0.995117</td>\n",
       "      <td>-1.639648</td>\n",
       "      <td>-1.103516</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.589844</td>\n",
       "      <td>-0.451416</td>\n",
       "      <td>-0.993164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.299805</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-1.299805</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>46.65625</td>\n",
       "      <td>0.002155</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.649902</td>\n",
       "      <td>5.304813e-06</td>\n",
       "      <td>0.280029</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.370117</td>\n",
       "      <td>-0.061005</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.649902</td>\n",
       "      <td>-0.020340</td>\n",
       "      <td>-1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.000088</td>\n",
       "      <td>2.300781</td>\n",
       "      <td>71.437500</td>\n",
       "      <td>-3.576279e-07</td>\n",
       "      <td>-2.269531</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>114.93750</td>\n",
       "      <td>0.004189</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.129883</td>\n",
       "      <td>2.067566e-03</td>\n",
       "      <td>0.600098</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.540039</td>\n",
       "      <td>-0.204224</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.160156</td>\n",
       "      <td>-0.040863</td>\n",
       "      <td>-1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.000003</td>\n",
       "      <td>1.370117</td>\n",
       "      <td>9.093750</td>\n",
       "      <td>-2.980232e-07</td>\n",
       "      <td>-1.030273</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>37.28125</td>\n",
       "      <td>0.000846</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.429932</td>\n",
       "      <td>1.866817e-04</td>\n",
       "      <td>0.449951</td>\n",
       "      <td>1.000977</td>\n",
       "      <td>-0.150024</td>\n",
       "      <td>0.168457</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.770020</td>\n",
       "      <td>0.168457</td>\n",
       "      <td>-1.000977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366027</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.000001</td>\n",
       "      <td>6.460938</td>\n",
       "      <td>53.718750</td>\n",
       "      <td>-1.072884e-06</td>\n",
       "      <td>-4.390625</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>82.31250</td>\n",
       "      <td>0.004509</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.679688</td>\n",
       "      <td>1.040101e-04</td>\n",
       "      <td>2.800781</td>\n",
       "      <td>1.000977</td>\n",
       "      <td>0.090027</td>\n",
       "      <td>0.012550</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.750000</td>\n",
       "      <td>1.418945</td>\n",
       "      <td>-1.001953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366028</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.000097</td>\n",
       "      <td>7.218750</td>\n",
       "      <td>11.109375</td>\n",
       "      <td>-1.794100e-05</td>\n",
       "      <td>-6.070312</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>48.50000</td>\n",
       "      <td>0.005367</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.750000</td>\n",
       "      <td>4.798889e-03</td>\n",
       "      <td>1.860352</td>\n",
       "      <td>1.001953</td>\n",
       "      <td>-1.459961</td>\n",
       "      <td>0.051117</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.900391</td>\n",
       "      <td>1.379883</td>\n",
       "      <td>-1.000977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366029</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.009666</td>\n",
       "      <td>4.601562</td>\n",
       "      <td>24.078125</td>\n",
       "      <td>7.730722e-05</td>\n",
       "      <td>-4.890625</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>56.12500</td>\n",
       "      <td>0.007149</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.519531</td>\n",
       "      <td>1.912842e-01</td>\n",
       "      <td>1.179688</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-1.190430</td>\n",
       "      <td>-0.129883</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.230469</td>\n",
       "      <td>-0.121521</td>\n",
       "      <td>-1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366030</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000031</td>\n",
       "      <td>5.988281</td>\n",
       "      <td>87.500000</td>\n",
       "      <td>3.039837e-06</td>\n",
       "      <td>-5.609375</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>99.93750</td>\n",
       "      <td>0.009995</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.710938</td>\n",
       "      <td>1.099586e-03</td>\n",
       "      <td>1.820312</td>\n",
       "      <td>0.998535</td>\n",
       "      <td>-1.080078</td>\n",
       "      <td>-0.524902</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.089844</td>\n",
       "      <td>0.613281</td>\n",
       "      <td>-0.998047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366031</th>\n",
       "      <td>2.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>5.640625</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>5.960464e-08</td>\n",
       "      <td>-13.132812</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>130.12500</td>\n",
       "      <td>0.027313</td>\n",
       "      <td>...</td>\n",
       "      <td>-8.437500</td>\n",
       "      <td>1.192093e-07</td>\n",
       "      <td>-2.939453</td>\n",
       "      <td>0.988281</td>\n",
       "      <td>-7.640625</td>\n",
       "      <td>-1.876953</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.950195</td>\n",
       "      <td>-4.367188</td>\n",
       "      <td>-0.984863</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1366032 rows × 39 columns</p>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9343c1c4-d3d2-483f-9b55-52c3d62c06c3')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-9343c1c4-d3d2-483f-9b55-52c3d62c06c3 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-9343c1c4-d3d2-483f-9b55-52c3d62c06c3');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "<div id=\"df-cfc6c6fa-a625-4a70-a055-44c6a031f92d\">\n",
       "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cfc6c6fa-a625-4a70-a055-44c6a031f92d')\"\n",
       "            title=\"Suggest charts.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "  </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "  <script>\n",
       "    async function quickchart(key) {\n",
       "      const quickchartButtonEl =\n",
       "        document.querySelector('#' + key + ' button');\n",
       "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "      try {\n",
       "        const charts = await google.colab.kernel.invokeFunction(\n",
       "            'suggestCharts', [key], {});\n",
       "      } catch (error) {\n",
       "        console.error('Error during call to suggestCharts:', error);\n",
       "      }\n",
       "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "    }\n",
       "    (() => {\n",
       "      let quickchartButtonEl =\n",
       "        document.querySelector('#df-cfc6c6fa-a625-4a70-a055-44c6a031f92d button');\n",
       "      quickchartButtonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "    })();\n",
       "  </script>\n",
       "</div>\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "         rsi_sig  vwap_short    resist3    stoch_k     vwap_long   support3  \\\n",
       "0            1.0    0.000314  32.125000   5.117188 -9.399652e-05 -24.937500   \n",
       "1            2.0    0.000000   5.601562  85.687500  1.609325e-06  -6.441406   \n",
       "2            1.0    0.000000   1.299805  50.000000  0.000000e+00  -1.299805   \n",
       "3            1.0   -0.000088   2.300781  71.437500 -3.576279e-07  -2.269531   \n",
       "4            0.0   -0.000003   1.370117   9.093750 -2.980232e-07  -1.030273   \n",
       "...          ...         ...        ...        ...           ...        ...   \n",
       "1366027      1.0   -0.000001   6.460938  53.718750 -1.072884e-06  -4.390625   \n",
       "1366028      1.0   -0.000097   7.218750  11.109375 -1.794100e-05  -6.070312   \n",
       "1366029      1.0   -0.009666   4.601562  24.078125  7.730722e-05  -4.890625   \n",
       "1366030      1.0    0.000031   5.988281  87.500000  3.039837e-06  -5.609375   \n",
       "1366031      2.0   -0.000000   5.640625  95.000000  5.960464e-08 -13.132812   \n",
       "\n",
       "         fibo_sig  result  stoch_k_sm   boll_up  ...   support2           atr  \\\n",
       "0             2.0       0    41.65625  0.005577  ... -10.671875  2.527237e-03   \n",
       "1             0.0       1   113.00000  0.017624  ...  -3.429688  2.067089e-04   \n",
       "2             2.0       1    46.65625  0.002155  ...  -0.649902  5.304813e-06   \n",
       "3             2.0       1   114.93750  0.004189  ...  -1.129883  2.067566e-03   \n",
       "4             2.0       1    37.28125  0.000846  ...  -0.429932  1.866817e-04   \n",
       "...           ...     ...         ...       ...  ...        ...           ...   \n",
       "1366027       0.0       1    82.31250  0.004509  ...  -1.679688  1.040101e-04   \n",
       "1366028       2.0       1    48.50000  0.005367  ...  -2.750000  4.798889e-03   \n",
       "1366029       0.0       0    56.12500  0.007149  ...  -2.519531  1.912842e-01   \n",
       "1366030       0.0       1    99.93750  0.009995  ...  -2.710938  1.099586e-03   \n",
       "1366031       0.0       0   130.12500  0.027313  ...  -8.437500  1.192093e-07   \n",
       "\n",
       "          resist1   ema_rel  support1  ichi_base  exch    resist2    ichi_b  \\\n",
       "0        9.500000  1.026367 -4.761719   2.722656   1.0  17.843750  5.109375   \n",
       "1        1.370117  0.995117 -1.639648  -1.103516   0.0   2.589844 -0.451416   \n",
       "2        0.280029  1.000000 -0.370117  -0.061005   0.0   0.649902 -0.020340   \n",
       "3        0.600098  1.000000 -0.540039  -0.204224   1.0   1.160156 -0.040863   \n",
       "4        0.449951  1.000977 -0.150024   0.168457   3.0   0.770020  0.168457   \n",
       "...           ...       ...       ...        ...   ...        ...       ...   \n",
       "1366027  2.800781  1.000977  0.090027   0.012550   3.0   3.750000  1.418945   \n",
       "1366028  1.860352  1.001953 -1.459961   0.051117   1.0   3.900391  1.379883   \n",
       "1366029  1.179688  1.000000 -1.190430  -0.129883   3.0   2.230469 -0.121521   \n",
       "1366030  1.820312  0.998535 -1.080078  -0.524902   2.0   3.089844  0.613281   \n",
       "1366031 -2.939453  0.988281 -7.640625  -1.876953   2.0   0.950195 -4.367188   \n",
       "\n",
       "         macd_hist_rel  \n",
       "0            -1.027344  \n",
       "1            -0.993164  \n",
       "2            -1.000000  \n",
       "3            -1.000000  \n",
       "4            -1.000977  \n",
       "...                ...  \n",
       "1366027      -1.001953  \n",
       "1366028      -1.000977  \n",
       "1366029      -1.000000  \n",
       "1366030      -0.998047  \n",
       "1366031      -0.984863  \n",
       "\n",
       "[1366032 rows x 39 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 419
    },
    "id": "QUJapH6FGhZY",
    "outputId": "bbe6e1ac-c749-46b0-c8cb-acc777a7ee89"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-23852226-1a1d-4dd5-8c36-1573a2e739cb\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rsi_sig</th>\n",
       "      <th>fibo_sig</th>\n",
       "      <th>ichi_sig</th>\n",
       "      <th>stoch_sig</th>\n",
       "      <th>boll_sig</th>\n",
       "      <th>exch</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366027</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366028</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366029</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366030</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1366031</th>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1366032 rows × 6 columns</p>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23852226-1a1d-4dd5-8c36-1573a2e739cb')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-23852226-1a1d-4dd5-8c36-1573a2e739cb button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-23852226-1a1d-4dd5-8c36-1573a2e739cb');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "<div id=\"df-1ba8aa02-083b-4af7-81cf-6a75e8fe1bdf\">\n",
       "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1ba8aa02-083b-4af7-81cf-6a75e8fe1bdf')\"\n",
       "            title=\"Suggest charts.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "  </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "  <script>\n",
       "    async function quickchart(key) {\n",
       "      const quickchartButtonEl =\n",
       "        document.querySelector('#' + key + ' button');\n",
       "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "      try {\n",
       "        const charts = await google.colab.kernel.invokeFunction(\n",
       "            'suggestCharts', [key], {});\n",
       "      } catch (error) {\n",
       "        console.error('Error during call to suggestCharts:', error);\n",
       "      }\n",
       "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "    }\n",
       "    (() => {\n",
       "      let quickchartButtonEl =\n",
       "        document.querySelector('#df-1ba8aa02-083b-4af7-81cf-6a75e8fe1bdf button');\n",
       "      quickchartButtonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "    })();\n",
       "  </script>\n",
       "</div>\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "         rsi_sig  fibo_sig  ichi_sig  stoch_sig  boll_sig  exch\n",
       "0            1.0       2.0       2.0        2.0       1.0   1.0\n",
       "1            2.0       0.0       2.0        2.0       1.0   0.0\n",
       "2            1.0       2.0       2.0        0.0       1.0   0.0\n",
       "3            1.0       2.0       0.0        2.0       1.0   1.0\n",
       "4            0.0       2.0       0.0        2.0       1.0   3.0\n",
       "...          ...       ...       ...        ...       ...   ...\n",
       "1366027      1.0       0.0       2.0        2.0       1.0   3.0\n",
       "1366028      1.0       2.0       2.0        2.0       1.0   1.0\n",
       "1366029      1.0       0.0       0.0        2.0       1.0   3.0\n",
       "1366030      1.0       0.0       2.0        2.0       1.0   2.0\n",
       "1366031      2.0       0.0       0.0        2.0       2.0   2.0\n",
       "\n",
       "[1366032 rows x 6 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_[obj_name]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 544
    },
    "id": "F-GnpHxiGk1O",
    "outputId": "309bee1e-0fa9-4902-bd3a-4bf89c8d2821"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-957f8547-0d55-45cb-a2b2-fa788c99bf33\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rsi_sig</th>\n",
       "      <th>vwap_short</th>\n",
       "      <th>resist3</th>\n",
       "      <th>stoch_k</th>\n",
       "      <th>vwap_long</th>\n",
       "      <th>support3</th>\n",
       "      <th>fibo_sig</th>\n",
       "      <th>result</th>\n",
       "      <th>stoch_k_sm</th>\n",
       "      <th>boll_up</th>\n",
       "      <th>...</th>\n",
       "      <th>support2</th>\n",
       "      <th>atr</th>\n",
       "      <th>resist1</th>\n",
       "      <th>ema_rel</th>\n",
       "      <th>support1</th>\n",
       "      <th>ichi_base</th>\n",
       "      <th>exch</th>\n",
       "      <th>resist2</th>\n",
       "      <th>ichi_b</th>\n",
       "      <th>macd_hist_rel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3.135204e-04</td>\n",
       "      <td>32.125000</td>\n",
       "      <td>5.117188</td>\n",
       "      <td>-9.399652e-05</td>\n",
       "      <td>-24.937500</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>41.65625</td>\n",
       "      <td>0.005577</td>\n",
       "      <td>...</td>\n",
       "      <td>-10.671875</td>\n",
       "      <td>0.002527</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>1.026367</td>\n",
       "      <td>-4.761719</td>\n",
       "      <td>2.722656</td>\n",
       "      <td>1</td>\n",
       "      <td>17.843750</td>\n",
       "      <td>5.109375</td>\n",
       "      <td>-1.027344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>5.601562</td>\n",
       "      <td>85.687500</td>\n",
       "      <td>1.609325e-06</td>\n",
       "      <td>-6.441406</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>113.00000</td>\n",
       "      <td>0.017624</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.429688</td>\n",
       "      <td>0.000207</td>\n",
       "      <td>1.370117</td>\n",
       "      <td>0.995117</td>\n",
       "      <td>-1.639648</td>\n",
       "      <td>-1.103516</td>\n",
       "      <td>0</td>\n",
       "      <td>2.589844</td>\n",
       "      <td>-0.451416</td>\n",
       "      <td>-0.993164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.299805</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-1.299805</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>46.65625</td>\n",
       "      <td>0.002155</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.649902</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.280029</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.370117</td>\n",
       "      <td>-0.061005</td>\n",
       "      <td>0</td>\n",
       "      <td>0.649902</td>\n",
       "      <td>-0.020340</td>\n",
       "      <td>-1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>-8.791685e-05</td>\n",
       "      <td>2.300781</td>\n",
       "      <td>71.437500</td>\n",
       "      <td>-3.576279e-07</td>\n",
       "      <td>-2.269531</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114.93750</td>\n",
       "      <td>0.004189</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.129883</td>\n",
       "      <td>0.002068</td>\n",
       "      <td>0.600098</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.540039</td>\n",
       "      <td>-0.204224</td>\n",
       "      <td>1</td>\n",
       "      <td>1.160156</td>\n",
       "      <td>-0.040863</td>\n",
       "      <td>-1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>-3.337860e-06</td>\n",
       "      <td>1.370117</td>\n",
       "      <td>9.093750</td>\n",
       "      <td>-2.980232e-07</td>\n",
       "      <td>-1.030273</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>37.28125</td>\n",
       "      <td>0.000846</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.429932</td>\n",
       "      <td>0.000187</td>\n",
       "      <td>0.449951</td>\n",
       "      <td>1.000977</td>\n",
       "      <td>-0.150024</td>\n",
       "      <td>0.168457</td>\n",
       "      <td>3</td>\n",
       "      <td>0.770020</td>\n",
       "      <td>0.168457</td>\n",
       "      <td>-1.000977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>-4.768372e-07</td>\n",
       "      <td>26.187500</td>\n",
       "      <td>18.515625</td>\n",
       "      <td>5.960464e-08</td>\n",
       "      <td>-35.125000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>48.31250</td>\n",
       "      <td>0.041840</td>\n",
       "      <td>...</td>\n",
       "      <td>-19.781250</td>\n",
       "      <td>0.000091</td>\n",
       "      <td>-0.080017</td>\n",
       "      <td>1.001953</td>\n",
       "      <td>-15.398438</td>\n",
       "      <td>0.752930</td>\n",
       "      <td>0</td>\n",
       "      <td>10.867188</td>\n",
       "      <td>-6.972656</td>\n",
       "      <td>-1.001953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>8.344650e-07</td>\n",
       "      <td>3.669922</td>\n",
       "      <td>77.500000</td>\n",
       "      <td>-1.192093e-07</td>\n",
       "      <td>-3.439453</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>116.00000</td>\n",
       "      <td>0.006840</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.660156</td>\n",
       "      <td>0.000987</td>\n",
       "      <td>1.209961</td>\n",
       "      <td>0.999023</td>\n",
       "      <td>-0.569824</td>\n",
       "      <td>-0.349854</td>\n",
       "      <td>3</td>\n",
       "      <td>1.889648</td>\n",
       "      <td>0.406494</td>\n",
       "      <td>-0.998047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>-1.966953e-06</td>\n",
       "      <td>0.549805</td>\n",
       "      <td>61.125000</td>\n",
       "      <td>5.364418e-06</td>\n",
       "      <td>-0.839844</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>88.37500</td>\n",
       "      <td>0.001616</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.489990</td>\n",
       "      <td>0.000085</td>\n",
       "      <td>0.020004</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.330078</td>\n",
       "      <td>-0.096313</td>\n",
       "      <td>3</td>\n",
       "      <td>0.199951</td>\n",
       "      <td>-0.142334</td>\n",
       "      <td>-0.999512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>-3.442764e-04</td>\n",
       "      <td>2.300781</td>\n",
       "      <td>91.687500</td>\n",
       "      <td>9.059906e-06</td>\n",
       "      <td>-2.689453</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>126.43750</td>\n",
       "      <td>0.004665</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.440430</td>\n",
       "      <td>0.002666</td>\n",
       "      <td>0.489990</td>\n",
       "      <td>0.999023</td>\n",
       "      <td>-0.759766</td>\n",
       "      <td>-0.207886</td>\n",
       "      <td>1</td>\n",
       "      <td>1.059570</td>\n",
       "      <td>-0.187134</td>\n",
       "      <td>-0.999512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>-8.744001e-05</td>\n",
       "      <td>3.150391</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.137257e-04</td>\n",
       "      <td>-2.589844</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>42.37500</td>\n",
       "      <td>0.002731</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.150391</td>\n",
       "      <td>0.007332</td>\n",
       "      <td>0.810059</td>\n",
       "      <td>1.001953</td>\n",
       "      <td>-0.629883</td>\n",
       "      <td>0.270508</td>\n",
       "      <td>1</td>\n",
       "      <td>1.719727</td>\n",
       "      <td>0.551758</td>\n",
       "      <td>-1.001953</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 39 columns</p>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-957f8547-0d55-45cb-a2b2-fa788c99bf33')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-957f8547-0d55-45cb-a2b2-fa788c99bf33 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-957f8547-0d55-45cb-a2b2-fa788c99bf33');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "<div id=\"df-af0a5aca-b293-4039-b536-1b8bbf27ba43\">\n",
       "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af0a5aca-b293-4039-b536-1b8bbf27ba43')\"\n",
       "            title=\"Suggest charts.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "  </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "  <script>\n",
       "    async function quickchart(key) {\n",
       "      const quickchartButtonEl =\n",
       "        document.querySelector('#' + key + ' button');\n",
       "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "      try {\n",
       "        const charts = await google.colab.kernel.invokeFunction(\n",
       "            'suggestCharts', [key], {});\n",
       "      } catch (error) {\n",
       "        console.error('Error during call to suggestCharts:', error);\n",
       "      }\n",
       "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "    }\n",
       "    (() => {\n",
       "      let quickchartButtonEl =\n",
       "        document.querySelector('#df-af0a5aca-b293-4039-b536-1b8bbf27ba43 button');\n",
       "      quickchartButtonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "    })();\n",
       "  </script>\n",
       "</div>\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "   rsi_sig    vwap_short    resist3    stoch_k     vwap_long   support3  \\\n",
       "0        1  3.135204e-04  32.125000   5.117188 -9.399652e-05 -24.937500   \n",
       "1        2  0.000000e+00   5.601562  85.687500  1.609325e-06  -6.441406   \n",
       "2        1  0.000000e+00   1.299805  50.000000  0.000000e+00  -1.299805   \n",
       "3        1 -8.791685e-05   2.300781  71.437500 -3.576279e-07  -2.269531   \n",
       "4        0 -3.337860e-06   1.370117   9.093750 -2.980232e-07  -1.030273   \n",
       "5        1 -4.768372e-07  26.187500  18.515625  5.960464e-08 -35.125000   \n",
       "6        1  8.344650e-07   3.669922  77.500000 -1.192093e-07  -3.439453   \n",
       "7        1 -1.966953e-06   0.549805  61.125000  5.364418e-06  -0.839844   \n",
       "8        1 -3.442764e-04   2.300781  91.687500  9.059906e-06  -2.689453   \n",
       "9        1 -8.744001e-05   3.150391   0.000000 -1.137257e-04  -2.589844   \n",
       "\n",
       "   fibo_sig  result  stoch_k_sm   boll_up  ...   support2       atr   resist1  \\\n",
       "0         2       0    41.65625  0.005577  ... -10.671875  0.002527  9.500000   \n",
       "1         0       1   113.00000  0.017624  ...  -3.429688  0.000207  1.370117   \n",
       "2         2       1    46.65625  0.002155  ...  -0.649902  0.000005  0.280029   \n",
       "3         2       1   114.93750  0.004189  ...  -1.129883  0.002068  0.600098   \n",
       "4         2       1    37.28125  0.000846  ...  -0.429932  0.000187  0.449951   \n",
       "5         2       1    48.31250  0.041840  ... -19.781250  0.000091 -0.080017   \n",
       "6         2       1   116.00000  0.006840  ...  -1.660156  0.000987  1.209961   \n",
       "7         0       1    88.37500  0.001616  ...  -0.489990  0.000085  0.020004   \n",
       "8         0       1   126.43750  0.004665  ...  -1.440430  0.002666  0.489990   \n",
       "9         2       1    42.37500  0.002731  ...  -1.150391  0.007332  0.810059   \n",
       "\n",
       "    ema_rel   support1  ichi_base  exch    resist2    ichi_b  macd_hist_rel  \n",
       "0  1.026367  -4.761719   2.722656     1  17.843750  5.109375      -1.027344  \n",
       "1  0.995117  -1.639648  -1.103516     0   2.589844 -0.451416      -0.993164  \n",
       "2  1.000000  -0.370117  -0.061005     0   0.649902 -0.020340      -1.000000  \n",
       "3  1.000000  -0.540039  -0.204224     1   1.160156 -0.040863      -1.000000  \n",
       "4  1.000977  -0.150024   0.168457     3   0.770020  0.168457      -1.000977  \n",
       "5  1.001953 -15.398438   0.752930     0  10.867188 -6.972656      -1.001953  \n",
       "6  0.999023  -0.569824  -0.349854     3   1.889648  0.406494      -0.998047  \n",
       "7  1.000000  -0.330078  -0.096313     3   0.199951 -0.142334      -0.999512  \n",
       "8  0.999023  -0.759766  -0.207886     1   1.059570 -0.187134      -0.999512  \n",
       "9  1.001953  -0.629883   0.270508     1   1.719727  0.551758      -1.001953  \n",
       "\n",
       "[10 rows x 39 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_.head(10)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "И так же перевожу в int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "h8C0dDeDUKY4"
   },
   "outputs": [],
   "source": [
    "for col in obj_name:\n",
    "    train_[col] = train_[col].astype(np.int8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "E2aLeBKaBoi3",
    "outputId": "e2318ce9-c238-4335-e6aa-7b0203ed16a7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1366032 entries, 0 to 1366031\n",
      "Data columns (total 39 columns):\n",
      " #   Column         Non-Null Count    Dtype  \n",
      "---  ------         --------------    -----  \n",
      " 0   rsi_sig        1366032 non-null  int8   \n",
      " 1   vwap_short     1366032 non-null  float16\n",
      " 2   resist3        1366032 non-null  float16\n",
      " 3   stoch_k        1366032 non-null  float16\n",
      " 4   vwap_long      1366032 non-null  float16\n",
      " 5   support3       1366032 non-null  float16\n",
      " 6   fibo_sig       1366032 non-null  int8   \n",
      " 7   result         1366032 non-null  int8   \n",
      " 8   stoch_k_sm     1366032 non-null  float16\n",
      " 9   boll_up        1366032 non-null  float16\n",
      " 10  stoch_d        1366032 non-null  float16\n",
      " 11  ichi_sig       1366032 non-null  int8   \n",
      " 12  boll_low       1366032 non-null  float16\n",
      " 13  stoch_sig      1366032 non-null  int8   \n",
      " 14  macd_rel       1366032 non-null  float16\n",
      " 15  pivot_pt       1366032 non-null  float16\n",
      " 16  macd_sig_rel   1366032 non-null  float16\n",
      " 17  wma_rel        1366032 non-null  float16\n",
      " 18  stoch_sig_val  1366032 non-null  float16\n",
      " 19  s&p500         1366032 non-null  float16\n",
      " 20  ichi_a         1366032 non-null  float16\n",
      " 21  boll_sig       1366032 non-null  int8   \n",
      " 22  adx            1366032 non-null  float16\n",
      " 23  ichi_conv      1366032 non-null  float16\n",
      " 24  ma_rel         1366032 non-null  float16\n",
      " 25  sma_rel        1366032 non-null  float16\n",
      " 26  rsi            1366032 non-null  float16\n",
      " 27  sar_rel        1366032 non-null  float16\n",
      " 28  macd           1366032 non-null  float16\n",
      " 29  support2       1366032 non-null  float16\n",
      " 30  atr            1366032 non-null  float16\n",
      " 31  resist1        1366032 non-null  float16\n",
      " 32  ema_rel        1366032 non-null  float16\n",
      " 33  support1       1366032 non-null  float16\n",
      " 34  ichi_base      1366032 non-null  float16\n",
      " 35  exch           1366032 non-null  int8   \n",
      " 36  resist2        1366032 non-null  float16\n",
      " 37  ichi_b         1366032 non-null  float16\n",
      " 38  macd_hist_rel  1366032 non-null  float16\n",
      "dtypes: float16(32), int8(7)\n",
      "memory usage: 92.5 MB\n"
     ]
    }
   ],
   "source": [
    "train_.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "lX7d0lGeHlQB"
   },
   "outputs": [],
   "source": [
    "X = train_.drop('result', axis = 1)\n",
    "y = train_['result']"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Строю катбуст, чтобы отсетить часть признаков"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Z9nNFeZQHf6H"
   },
   "outputs": [],
   "source": [
    "model = CatBoostClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "9UsUIrZYHjhy"
   },
   "outputs": [],
   "source": [
    "model.fit(X, y, verbose = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "d6vXPsupJw1Q",
    "outputId": "338d2704-c331-47a7-f62d-3c99a6514071"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9411741452616044"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1_score(model.predict(X), y, average = 'micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 541
    },
    "id": "Oe9rFqdOIMgn",
    "outputId": "76c4ceb1-4cb4-4e8f-84de-5f3e8cec1f47"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABB8AAAIQCAYAAADJvsZHAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAC8xUlEQVR4nOzdeVhV5f7//+cGYcu0QXEAjUAFCQxx7OSMI6JZhqmRKQ5pappodhI9JltLPJZzZWV50o4Namp9MzPyiCYOaYJpEqlpcE6Y5sBWzK3C/v3hz/1phwMoiMPrcV3ruvZa673u+70W/dF6e6/7NthsNhsiIiIiIiIiImXEqbwTEBEREREREZE7m4oPIiIiIiIiIlKmVHwQERERERERkTKl4oOIiIiIiIiIlCkVH0RERERERESkTKn4ICIiIiIiIiJlSsUHERERERERESlTKj6IiIiIiIiISJlS8UFEREREREREypSKDyIiIiIiIiJSplR8EBERuQO89957GAyGy27jxo0rkz43b95MUlISJ0+eLJP2b8Sl57Fjx47yTuW6vfHGG7z33nvlnYaIiEipqFDeCYiIiEjpmTx5MrVq1XI4dv/995dJX5s3b8ZsNtO/f398fHzKpI+72RtvvEGVKlXo379/eaciIiJyw1R8EBERuYPExMTQpEmT8k7jhuTn5+Ph4VHeaZSbM2fO4O7uXt5piIiIlCp9diEiInIXWbNmDa1atcLDwwMvLy+6du3KDz/84BDz/fff079/f2rXrk3FihXx8/Nj4MCBHDt2zB6TlJTE888/D0CtWrXsn3gcOnSIQ4cOYTAYLvvJgMFgICkpyaEdg8HA3r17eeKJJ6hUqRItW7a0n//3v/9N48aNcXNzo3Llyjz++OPk5ORc1733798fT09PsrOzeeihh/D09KRmzZq8/vrrAOzevZt27drh4eFBYGAgH3zwgcP1lz7l2LhxI08//TS+vr6YTCb69evHiRMnivT3xhtvUK9ePYxGIzVq1OCZZ54p8olKVFQU999/P9999x2tW7fG3d2d8ePHExQUxA8//MCGDRvszzYqKgqA48ePM3bsWCIiIvD09MRkMhETE8OuXbsc2k5NTcVgMLB06VJefvll7rnnHipWrEj79u3Zv39/kXy3bdtGly5dqFSpEh4eHtSvX585c+Y4xPz444889thjVK5cmYoV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nz+fvn370qhRIx5//HGqVq1KdnY2q1evpkWLFrz22muYTCb7MpTnz5+nZs2afPXVVxw8eLBIm40bNwZgwoQJPP7447i4uNCtWzc8PDx46qmnmDZtGk899RRNmjRh48aN/PTTT8XOt06dOrz00kskJiZy6NAhunfvjpeXFwcPHmTlypUMGTKEsWPHltrzKYlz587Rvn17evXqRVZWFm+88QYtW7bk4YcfBi4uN5qYmIjZbKZz5848/PDD9rimTZvy5JNPFqufxo0bM3/+fF566SWCg4OpVq0a7dq146GHHmLy5MkMGDCA5s2bs3v3bpYsWeIwyqIknJycmD9/Pt26daNBgwYMGDAAf39/fvzxR3744QfWrl0LXJzMtGXLlkRERDB48GBq167Nb7/9xpYtW/jvf//Lrl27rqt/ERG5O6j4ICIicpd44oknqFGjBtOmTeOVV17BarVSs2ZNWrVq5bDawgcffMDIkSN5/fXXsdlsdOrUiTVr1lCjRg2H9po2bcqUKVN48803+fLLLyksLOTgwYN4eHjw4osvcvToUZYvX87SpUuJiYlhzZo1VKtWrdj5jhs3jrp16zJr1izMZjMAAQEBdOrUyf6iXx5ee+01lixZwosvvsj58+eJi4tj7ty5Dp9JJCUlUbVqVV577TVGjx5N5cqVGTJkCFOnTi32ZJkvvvgiv/zyC9OnT+fUqVO0adOGdu3aMX78ePLz8/nggw/4+OOPadSoEatXr2bcuHHXfU/R0dGsX78es9nMjBkzKCwspE6dOgwePNgeEx4ezo4dOzCbzbz33nscO3aMatWq0bBhQ4dPdERERC7HYLsZMymJiIiI3Obee+89BgwYwPbt2y+7ooiIiIhcmeZ8EBEREREREZEypeKDiIiIiIiIiJQpFR9EREREREREpExpzgcRERERERERKVMa+SAiIiIiIiIiZUrFBxEREREREREpUxXKOwEpHYWFhfz66694eXk5rDMuIiIiIiIiUhZsNhunTp2iRo0aODldfWyDig93iF9//ZWAgIDyTkNERERERETuMjk5Odxzzz1XjVHx4Q7h5eUFXPyjm0ymcs5GRERERERE7nQWi4WAgAD7++jVqPhwh7j0qYXJZFLxQURERERERG6a4nz6rwknRURERERERKRMqfggIiIiIiIiImVKxQcRERERERERKVMqPoiIiIiI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8AiH5ORkzGbzDbUhIiIiIiIicjPcdiMfIiMjad++PREREfTs2ZMFCxZw4sSJErXRrFmzIvuXRjUUJyYzM5PIyEh74QEuFjQKCwvJysqyH4uIiHAoPJSmxMRE8vLy7FtOTk6Z9CMiIiIiIiJyo2674oOzszMpKSmsWbOG8PBw5s2bR2hoKAcPHsTJyanI5xfnz58vp0xxKE6UNqPRiMlkcthEREREREREbkW3XfEBLk4I2aJFC8xmM+np6bi6urJy5UqqVq3qMI9CQUEBe/bsKXL91q1bi+yHhYUVOyYsLIxdu3aRn59vP5+WloaTkxOhoaFXzd3V1ZWCgoLi3aiIiIiIiIjIHeC2m/Nh27ZtrFu3jk6dOlGtWjW2bdvG0aNHCQsLw8PDgzFjxrB69Wrq1KnDzJkzOXnyZJE20tLSmD59Ot27dyclJYVly5axevVqh5hly5bRpEkTWrZsyZIlS/j222959913AejTpw+TJk0iPj6epKQkjh49ysiRI+nbt699vocrCQoKYuPGjTz++OMYjUaqVKkCwN69ezl37hzHjx/n1KlTZGRkANCgQYMbfmYiIiIiIiIi5em2Kz6YTCY2btzI7NmzsVgsBAYGMmPGDGJiYjh//jy7du2iX79+VKhQgdGjR9O2bdsibTz33HPs2LEDs9mMyWRi5syZREdHO8SYzWY++ugjhg8fjr+/Px9++CHh4eEAuLu7s3btWkaNGkXTpk1xd3enR48ezJw585r5T548maeffpo6depgtVrtn4l06dKFX375xR7XsGFDgBKt4gGwxxytTzBERERERETklmKwlfTt9hYWFRVFgwYNmD179hVjgoKCSEhIICEhoci59957j4SEBPLy8li5ciUZGRmsWrXKPgrhavr378/JkydZtWrVded/IywWC97e3uTl5an4ICIiIiIiImWuJO+ht93IB7m6+yetxcnoXt5pyF3m0LSu5Z2CiIiIiIjcwm7LCSdFRERERERE5PZxxxUfLly4wIgRI/D29qZKlSpMnDjRPm/CiRMnaN26NWazGXd3d2JiYti3b1+RNmw2G927d7+hPKxWK88++yzVqlWjYsWKtGzZku3bt9vPN2nShFdffdW+3717d1xcXDh9+jQA//3vfzEYDOzfv/+G8hAREREREREpb3dc8WHRokVUqFCBb7/9ljlz5jBz5kzeeecd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U1Np0qQJp0+fZv369Rw6dIj9+/ezf/9+7rnnHof2bDZbie5ljzlan2CIiIiIiIjILcVgK+nbrdwUBoOBlStX0r1792LFWywWvL29ycvLU/FBREREREREylxJ3kM18uEOc/+ktTgZ3cs7DblBh6Z1Le8URERERERESo3mfBARERERERGRMqXiw19ERUUxcuRIEhISqFSpEtWrV2fBggXk5+czYMAAvLy8CA4OZs2aNQAUFBQwaNAgatWqhZubG6GhocyZM6dIuwsXLqRevXoYjUb8/f0ZMWKE/dylJT0rVqxIeHg4KSkpN+1+RURERERERMqaig+XsWjRIqpUqcK3337LyJEjGTZsGD179qR58+bs3LmTTp060bdvX86cOUNhYSH33HMPy5YtY+/evbz44ouMHz+epUuX2tubP38+zzzzDEOGDGH37t189tlnBAcHA1BYWEhsbCyurq5s27aNN998kxdeeKG8bl1ERERERESk1GnCyb+IioqioKCAb775Brg4ssHb25vY2FgWL14MwOHDh/H392fLli08+OCDRdoYMWIEhw8fZvny5QDUrFmTAQMG8NJLLxWJ/eqrr+jatSu//PILNWrUAODLL78kJibmqhNOWq1WrFarfd9isRAQEEBAwlLN+XAH0JwPIiIiIiJyqyvJhJMa+XAZ9evXt/92dnbG19eXiIgI+7Hq1asDcOTIEQBef/11GjduTNWqVfH09OTtt98mOzvbHvPrr7/Svn37y/aVmZlJQECAvfAA0KxZs2vmmJycjLe3t30LCAgo+Y2KiIiIiIiI3AQqPlyGi4uLw77BYHA4ZjAYgIufTHz00UeMHTuWQYMG8dVXX5GRkcGAAQM4d+4cAG5ubmWSY2JiInl5efYtJyenTPoRERERERERuVFaavMGpaWl0bx5c4YPH24/duDAAftvLy8vgoKCWLduHW3bti1yfVhYGDk5OeTm5uLv7w/A1q1br9mv0WjEaDSWwh2IiIiIiIiIlC2NfLhBISEh7Nixg7Vr1/LTTz8xceJEtm/f7hCTlJTEjBkzmDt3Lvv27WPnzp3MmzcPgA4dOlC3bl3i4+PZtWsX33zzDRMmTCiPWxEREREREREpExr5cIOefvpp0tPT6d27NwaDgbi4OIYPH25fihMgPj6es2fPMmvWLMaOHUuVKlV47LHHAHBycmLlypUMGjSI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XiEyMpL09HTGjRvHqFGjSElJcehn4sSJ9OjRg127dtGnTx8ef/xxMjMzAcjPzyc6OppKlSqxY8cOVqxYwfbt25k1a5a9H5PJxKZNm8jKyiIlJYXPP/+cFStWcM899zB58mRyc3PJzc294n3m5eUVWfbzz6xWKxaLxWETERERERERuRXddnM+5ObmcuHCBWJjYwkMDAQgIiKiRG20aNGCcePGAVC3bl3S0tKYNWsWHTt2tMf07NmTp556Cri4MkVKSgrz5s3jjTfe4IMPPuDs2bMsXrzYPtLhtddeo1u3bvzzn/+kevXqAHh4ePDOO+/g6upqb9fZ2RkvLy/8/PyumN/SpUvZvn07b7311hVjkpOTMZvNJbpvERERERERkfJw2418iIyMpH379kRERNCzZ08WLFjAiRMnStRGs2bNiuxfGtVQnJjMzEwiIyPthQe4WNAoLCwkKyvLfiwiIsKh8FAc69evZ8CAASxYsIB69epdMS4xMZG8vDz7lpOTU6J+RERERERERG6W26744OzsTEpKCmvWrCE8PJx58+YRGhrKwYMHcXJyKjKHwvnz58spUxyKE8WxYcMGunXrxqxZs+jXr99VY41GIyaTyWETERERERERuRXddsUHuDghZIsWLTCbzaSnp+Pq6srKlSupWrWqwzwKBQUF7Nmzp8j1W7duLbIfFhZW7JiwsDB27dpFfn6+/XxaWhpOTk6EhoZeNXdXV1cKCgqKHE9NTaVr167885//ZMiQIVdtQ0REREREROR2ctsVH7Zt28bUqVPZsWMH2dnZrFixgqNHjxIWFka7du1YvXo1q1ev5scff2TYsGGcPHmySBtpaWlMnz6dn376iddff51ly5YxatQoh5hly5axcOFCfvrpJyZNmsS3337LiBEjAOjTpw8VK1YkPj6ePXv2sH79ekaOHEnfvn3t8z1cSVBQEBs3buR///sfv//+O3DxU4uuXbvy7LPP0qNHDw4fPszhw4ftK3aIiIiIiIiI3M5uuwknTSYTGzduZPbs2VgsFgIDA5kxYwYxMTGcP3+eXbt20a9fPypUqMDo0aNp27ZtkTaee+45duzYgdlsxmQyMXPmTKKjox1izGYzH330EcOHD8ff358PP/yQ8PBwANzd3Vm7di2jRo2iadOmuLu706NHD2bOnHnN/CdPnszTTz9NnTp1sFqt2Gw2Fi1a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Cw4OLrL997//5YknnqBKlSr4+PjQokULfvnlF4fr3n//fYKCgvD29ubxxx/n1KlT9nNWq5Vnn32WatWqUbFiRVq2bMn27dvt51NTUzEYDKxZs4bGjRtjNBr597//jdlsZteuXRgMBgwGA++99971PXARERERERGRW8RNKz707NmTY8eOsX79evux48eP8+WXX/Lkk0/SoEEDUlNTAdi9ezcGg4H09HROnz4NwIYNG2jTpo39Wi8vL9577z327t3LnDlzWLBgAbNmzXLoc//+/SxdupT/9//+H19++SXp6ekMHz78mrleuHCB7t2706ZNG77//nu2bNnCkCFDMBgM9pgDBw6watUqPv/8cz7//HM2bNjAtGnT7Of//ve/88knn7Bo0SJ27txJcHAw0dHRHD9+3KGvcePGMW3aNDIzM+nYsSPPPfcc9erVIzc3l9zcXHr37n3ZHK1WKxaLxWETERERERERuRXdtOJDpUqViImJ4YMPPrAfW758OVWqVKFt27ZERUXZiw+pqal07NiRsLAwNm3aZD/25+LDP/7xD5o3b05QUBDdunVj7NixLF261KHPs2fPsnjxYho0aEDr1q2ZN28eH330EYcPH75qrhaLhby8PB566CHq1KlDWFgY8fHx3HvvvfaYwsJC3nvvPe6//35atWpF3759WbduHQD5+fnMnz+fV155hZiYGMLDw1mwYAFubm68++67Dn1NnjyZjh07UqdOHWrWrImnpycVKlTAz88PPz8/3NzcLptjcnIy3t7e9u3Po0JEREREREREbiU3dcLJPn368Mknn2C1WgFYsmQJjz/+OE5OTrRp04ZNmzZRUFDAhg0biIqKshckfv31V/bv309UVJS9rY8//pgWLVrg5+eHp6cn//jHP8jOznbo795773WYs6FZs2YUFhaSlZV11TwrV65M//79iY6Oplu3bsyZM4fc3FyHmKCgILy8vOz7/v7+HDlyBLg4KuL8+fO0aNHCft7FxYUHHniAzMxMh3aaNGlSjCdXVGJiInl5efYtJyfnutoRERERERERKWs3tfjQrVs3bDYbq1evJicnh2+++YY+ffoA0Lp1a06dOsXOnTvZuHGjQ/Fhw4YN1KhRg5CQEAC2bNlCnz596NKlC59//jnp6elMmDCBc+fOlVqu//rXv9iyZQvNmzfn448/pm7dumzdutV+3sXF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rVgsFodNRERERERE5FakCSeLyWq1UrlyZb7++muaNWtmP/7UU09x5swZPvjgA5YtW0a/fv1ISEhg3rx5pKenExISAkDz5s2pXbs2//73vy/bflBQEK1ateL9998HwGaz4efnh9lsZujQoUXik5KSMJvNRY4HJCzVnA8iIiIiIiJS5jThZBnYv38/Z86coWPHjg7Hz507R8OGDQHo2bMnK1euZNq0acyfP99eeADIyMhg8ODBV+2jfv369t8GgwE/Pz+OHDly2djExETGjBlj37dYLAQEBJT4vkRERERERETKmooPxXT69GkAVq9eTc2aNR3OGY1G4OKcDd999x3Ozs7s27fPIebPn1dciYuLi8O+wWCgsLDwsrFGo9Her4iIiIiIiMitTHM+FFN4eDhGo5Hs7GyCg4MdtksjDp577jmcnJxYs2YNc+fO5T//+Y/9+vr167Nu3brySl9ERERERESk3GjkQzF5eXkxduxYRo8eTWFhIS1btiQvL4+0tDRMJhNVqlRh4cKFbNmyhUaNGvH8888THx/P999/T6VKlZg0aRLt27enTp06PP7441y4cIEvvviCF154obxvTURERERERKRMqfhQAlOmTKFq1aokJyfz888/4+PjQ6NGjUhMTKR3794kJSXRqFEjAMxmM1999RVDhw7l448/JioqimXLljFlyhSmTZuGyWSidevWpZ7jHnP0NSf6EBEREREREbmZ7ujVLgwGAytXrqR79+4lvjY1NZW2bdty4sQJfHx8Sj230laSWUZFREREREREbtRtt9pF//79OXnyJKtWrSrvVG57909ae0svtaklNkVERERERO4+mnBSRERERERERMrUTS0+LF++nIiICNzc3PD19aVDhw48//zzLFq0iE8//RSDwYDBYCA1NRWA3bt3065dO3v8kCFD7EteXrJw4ULq1auH0WjE39+fESNGOJz//fffefTRR3F3dyckJITPPvvsunI/c+YMMTExtGjRgpMnT1419ty5c4wYMQJ/f38qVqxIYGAgycnJ9vMGg4G33nqLhx56CHd3d8LCwtiyZQv79+8nKioKDw8PmjdvzoEDB64rVxEREREREZFbyU0rPuTm5hIXF8fAgQPJzMwkNTWV2NhYJk2aRK9evejcuTO5ubnk5ubSvHlz8vPziY6OplKlSmzfvp1ly5bx9ddfOxQX5s+fzzPPPMOQIUPYvXs3n332GcHBwQ79ms1mevXqxffff0+XLl3o06cPx48fL1HuJ0+epGPHjhQWFpKSknLNOSDmzp3LZ599xtKlS8nKymLJkiUEBQU5xEyZMoV+/fqRkZHBfffdxxNPPMHTTz9NYmIiO3bswGazFSmk/JnVasVisThsIiIiIiIiIreimzbnQ25uLhcuXCA2NpbAwEAAIiIiAHBzc8NqteLn52ePX7RoEWfPnmXx4sV4eHgA8Nprr9GtWzf++c9/Ur16dV566SWee+45Ro0aZb+uadOmDv3279+fuLg4AKZOncrcuXP59ttv6dy5c7HyPnz4ML179yYkJIQPPvgAV1fXa16TnZ1NSEgILVu2xGAw2O/3zwYMGECvXr0AeOGFF2jWrBkTJ04kOjoagFGjRjFgwIAr9pGcnIzZbC7WPYiIiIiIiIiUp5s28iEyMpL27dsTERFBz549WbBgASdOnLhifGZmJpGRkfbCA0CLFi0oLCwkKyuLI0eO8Ouvv9K+ffur9lu/fn37bw8PD0wmE0eOHCl23h07diQ4OJiPP/64WIUHuFjwyMjIIDQ0lGeffZavvvrqqnlVr14d+L9izKVjZ8+eveKIhsTERPLy8uxbTk5Ose9JRERERERE5Ga6acUHZ2dnUlJSWLNmDeHh4cybN4/Q0FAOHjx4Xe25ubkVK87FxcVh32AwUFhYWOx+unbtysaNG9m7d2+xr2nUqBEHDx5kypQp/PHHH/Tq1YvHHnvsinkZDIYrHrtSrkajEZPJ5LCJiIiIiIiI3Ipu6oSTBoOBFi1aYDabSU9Px9XVlZUrV+Lq6kpBQYFDbFhYGLt27SI/P99+LC0tDScnJ0JDQ/Hy8iIoKIh169aVac7Tpk0jPj6e9u3bl6gAYTKZ6N27NwsWLODjjz/mk08+KfFcEyIiIiIiIiJ3gps258O2bdtYt24dnTp1olq1amzbto2jR48SFhbG2bNnWbt2LVlZWfj6+uLt7U2fPn2YNGkS8fHxJCUlcfToUUaOHEnfvn3tnykkJSUxdOhQqlWrRkxMDKdOnSItLY2RI0eWau6vvvoqBQUFtGvXjtTUVO67776rxs+cORN/f38aNmyIk5MTy5Ytw8/P75oTVYqIiIiIiIjciW5a8cFkMrFx40Zmz56NxWIhMDCQGTNmEBMTQ5MmTUhNTaVJkyacPn2a9evXExUVxdq1axk1ahRNmzbF3d2dHj16MHPmTHub8fHxnD17llmzZjF27FiqVKlS5POG0jJr1iyHAkTdunWvGOvl5cX06dPZt28fzs7ONG3alC+++AInp7IfaLLHHK1PMEREREREROSWYrDZbLbyTqKkDAYDK1eupHv37leNO3ToELVq1SI9PZ0GDRpcNua9994jISGBkydPlnqeNyIoKIiEhAQSEhKKFW+xWPD29iYvL0/FBxERERERESlzJXkPvWkjH25VvXv3pkuXLsWKvVULFX92/6S1OBndyzWHQ9O6lmv/IiIiIiIicmu5qRNO3kqGDh2Kp6cnVatWpXbt2nh6etq3oUOHXvXaqVOnOsT/eYuJibnqtefOnSvN2xARERERERG55ZWo+BAVFcXIkSNJSEigUqVKVK9enQULFpCfn8+AAQPw8vIiODiYNWvWAFBQUMCgQYOoVasWbm5uhIaGMmfOnCLtLly4kHr16mE0GvH392fEiBH2c/v27aN169ZUrFiR8PBwUlJSSnyTP//8M23btsXd3Z3IyEi2bNnC5MmTycjIYOLEiRgMBjIyMsjIyODDDz9k9+7deHl5YTKZaNy4MTt27CA1NZUBAwaQl5fHhAkTyM/PZ+DAgfbrLm3vvPOOQ99BQUFMmTKFfv36YTKZGDJkCACbNm2iVatWuLm5ERAQwLPPPuuwsoeIiIiIiIjInaLEIx8WLVpElSpV+Pbbbxk5ciTDhg2jZ8+eNG/enJ07d9KpUyf69u3LmTNnKCws5J577mHZsmXs3buXF198kfHjx7N06VJ7e/Pnz+eZZ55hyJAh7N69m88++4zg4GAACgsLiY2NxdXVlW3btvHmm2/ywgsvlPgmJ0yYwNixY8nIyKBu3brExcVRuXJlgoODqV69Os7OzgQHBxMcHExiYiK1a9dm+/btfPfdd4wbNw4XFxeaN2/O7NmzMZlM5Obmkpuby9SpU+3XXdpq1qxZpP9XX32VyMhI0tPTmThxIgcOHKBz58706NGD77//no8//phNmzY5FF2uxWq1YrFYHDYRERERERGRW1GJJpyMioqioKCAb775Brg4ssHb25vY2FgWL14MwOHDh/H392fLli08+OCDRdoYMWIEhw8fZvny5QDUrFmTAQMG8NJLLxWJ/eqrr+jatSu//PILNWrUAODLL78kJiamRBNOvvPO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FSVOu3bt8PT05KOPPipSTJPJhIuLC0ajUcUHERERERERKXXF+R56z8x8KC2rV6+22OzxTowaNYohQ4aUeJyLFy/y3nvvERERgbW1NR9//DHffPMNmzZtKnbshhM3YmVrf1t5nZj25G3dJyIiIiIiInIzFb744ObmVqz+tWrVuuG1DRs28Nhjj91pSjg6OuLo6Gg+NhgMrF+/nilTppCbm4ufnx+fffYZbdu2veOxRERERERERMraPfG0i9IUHh7OsGHDAMjLy+PPP/8kOzsbW1tb6tWrxwcffGDRf+7cufj4+HD58mV8fX1ZvXo1aWlppKWl8dVXXxEcHFykcZOTk2natCkODg64uroSFhZmfvJGbGysRRwbGxsCAgK4cuUKlStXpl27dqxdu5auXbuWwDsgIiIiIiIiUrYqfPHh73r16sXHH39MQkIChw8fZv78+RYzEOBq8eHdd99l3759ODk5ERcXR7169ahXr16Rl29cvnyZrl270qpVK3788Ud27txJ//79MRgM1+0/ffp0li1bxsKFC0lJScFkMpGUlHTTMfLy8jCZTBZNRERERERE5F5U4Zdd/OXnn3/mk08+YdOmTeblDNd7lOWUKVNo1aoVAGPGjOHJJ58kNzeXypUrF3ksk8mE0WikU6dOPPTQQwD4+/vfsH9iYiIxMTF069YNgDlz5rB+/fqbjhEfH09cXFyRcxIREREREREpK/fNzIe0tDSsra3NhYUbCQoKMv9co0YNALKysoo1lpubG9HR0URERNC5c2feeecdTp06dd2+RqORM2fO0LRpU/M5a2trmjRpctMxYmJiMBqN5paZmVmsHEVERERERETulvum+GBnZ1ekfn9fWvHXMomCgoJij7dw4UJ27txJixYtWLlyJfXr1+f7778vdpwbsbW1xdnZ2aKJiIiIiIiI3Ivum+JDYGAgBQUFbNmy5a6N2bhxY2JiYtixYwcNGzZk+fLl1/RxcXHBw8ODPXv2mM9duXKFffv23bU8RURERERERErTfVN88PHxoXfv3rz88sskJSVx/PhxkpOT+eSTT0p8rOPHjxMTE8POnTs5efIkX3/9NUeOHLnhvg9DhgwhPj6etWvXkp6eztChQzl79uwNN6gUERERERERKU/umw0nAebNm8cbb7zBP//5T7Kzs6lduzZvvPFGiY9jb2/PTz/9xOLFi8nO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UaNGpKamMmbMGIYOHcqmTZsAKCgooEuXLvzxxx9s2bKFTZs28csvv/Dss89axKhevTr16tW7psXExFC3bl327NnDDz/8wJgxY7CxsbluHsuWLWPKlClMnz6dH374gdq1azNv3rySfVNEREREREREykiF3PPBxcUFJycnrK2t8fT0vGG/sLAwxowZA0D9+vVJSUnh7bffpl27dmzevJkDBw5w/PhxvLy8AFiyZAkNGjRgz549hIaG3jSHjIwMRo8ezcMPPwyAr6/vDfsmJibSp08fXnrpJQAmTJjA119/TU5Ozg3vycvLIy8vz3xsMplumo+IiIiIiIhIWamQMx+Kqnnz5tccHz58GIDDhw/j5eVlLjwABAQE4Orqau5zMyNGjKBv3760bduWadOmcezYsRv2TU9Pp2nTphbn/vf4f8XHx+Pi4mJuf89TRERERERE5F5yXxcfSlNsbCz/+c9/ePLJJ/n2228JCAhgzZo1JRY/JiYGo9FobpmZmSUWW0RERERERKQk3dfFh++///6aY39/fwD8/f3JzMy0+FJ/6NAhzp07R0BAQJHi169fn+HDh/P1118TGRnJwoULr9vPz8/vmn0pbrRPxV9sbW1xdna2aCIiIiIiIiL3ovu6+JCSksKMGTP4+eefeffdd/n0008ZOnQoAG3btiUwMJCoqCj27dvH7t276dWrF61atSIkJOSmcf/8808GDx5McnIyJ0+eJCUlhT179pgLG/9ryJAhfPDBByxevJgjR44wefJkfvzxRwwGQ4m/ZhEREREREZG7rUJuOFlUI0eOZO/evcTFxeHs7My//vUvIiIiADAYDKxdu5YhQ4bQsmVLrKysaN++PYmJibeMa21tTXZ2Nr169eLMmTNUq1aNyMhI4uLirts/KiqKX375hVGjRpGbm0uPHj2Ijo5m9+7dxX5NB+MiNAtCRERERERE7imGwsLCwrJOorzw8fFh2LBhDBs2rNTjtGvXDk9PTz766KMixTSZTLi4uGA0GlV8EBERERERkVJXnO+h9/XMh+Las2cPDg4OJR7n4sWLvPfee0RERGBtbc3HH3/MN998w6ZNm4odu+HEjVjZ2l/32olpT952ziIiIiIiIiK3677e8+F/Xbp06abX3d3dsbe/+sW+QYMGODo6XrctW7asyHHg6hKP9evX07JlS5o0acIXX3zBZ599Rtu2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d6d3794sXbqU2bNn8/7771+3n5+fH3v37rU4t2fPnlLLS0RERERERORuKjfFh127djF16lT27t1LRkYGq1ev5rfffsPf3x8fHx9+/PFH0tPT+f3338nPzycqKorKlSvTu3dvDh48yHfffceQIUN48cUX8fDwACA2NpZZs2aRkJDAkSNH2LdvH4mJiSWS74QJE1i7di1Hjx7lP//5D+vWrcPf3/+6fV955RV++uknXn/9dX7++Wc++eQTFi1aBFwtuIiIiIiIiIiUZ+Wm+ODs7MzWrVvp2LEj9evXZ9y4ccyaNYsOHTrQr18//Pz8CAkJwd3dnZSUFOzt7dm4cSN//PEHoaGhdO/enTZt2jBnzhxzzN69ezN79mzmzp1LgwYN6NSpE0eOHCmRfCtVqkRMTAxBQUG0bNkSa2trVqxYcd2+derUYdWqVaxevZqgoCDmzZtnftqFra1tieQjIiIiIiIiUlYMhYWFhWWdhFxrypQpvPfee0XeSNJkMuHi4oLRaNT+DyIiIiIiIlLqivM9tNw8arOimzt3LqGhoVStWpWUlBRmzpzJ4MGDyzotERERERERkTtWbpZd3GsGDBiAo6PjdduAAQOKHe/IkSN06dKFgIAAJk2axMiRI4mNjS35xEVERERERETuMi27uE1ZWVmYTKbrXnN2dqZ69ep3NR8tuxAREREREZG7Scsu7oLq1avf9QKDiIiIiIiISHmkZRciIiIiIiIiUqpUfBARERERERGRUqXig4iIiIiIiIiUKhUfRERERERERKRUqfggIiIiIiIiIqVKxQcRERERERERKVUqPoiIiIiIiIhIqVLxQURERERERERKlYoPIiIiIiIiIlKqVHwQERERERERkVKl4oOIiIiIiIiIlCoVH0RERERERESkVKn4ICIiIiIiIiKl6oGyTkBKRmFhIQAmk6mMMxEREREREZH7wV/fP//6PnozKj5UENnZ2QB4eXmVcSYiIiIiIiJyPzl//jwuLi437aPiQwXh5uYGQEZGxi3/0UUqEpPJhJeXF5mZmTg7O5d1OiJ3jT77cj/S517uV/rsy72qsLCQ8+fPU7NmzVv2VfGhgrCyurp9h4uLi34hyX3J2dlZn325L+mzL/cjfe7lfqXPvtyLivqf39pwUkRERERERERKlYoPIiIiIiIiIlKqVHyoIGxtbZk4cSK2trZlnYrI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\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_importance = model.feature_importances_\n",
    "sorted_idx = np.argsort(feature_importance)\n",
    "fig = plt.figure(figsize=(12, 6))\n",
    "plt.barh(range(len(sorted_idx)), feature_importance[sorted_idx], align='center')\n",
    "plt.yticks(range(len(sorted_idx)), np.array(X.columns)[sorted_idx])\n",
    "plt.title('Feature Importance');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Sk0_Jw9OY0qc"
   },
   "outputs": [],
   "source": [
    "dict_import = {}\n",
    "for name, coef in zip(X.columns, feature_importance):\n",
    "    dict_import[name] = coef"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zbMmqxwoZHhq",
    "outputId": "bc5cd7d9-e317-47ff-93ec-c01fdaef9257"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'rsi_sig': 0.20810338232133435,\n",
       " 'vwap_short': 1.3083010710736962,\n",
       " 'resist3': 6.293449908419563,\n",
       " 'stoch_k': 2.4643762259141324,\n",
       " 'vwap_long': 0.47983960501722733,\n",
       " 'support3': 9.45038297186511,\n",
       " 'fibo_sig': 0.2453872891257816,\n",
       " 'stoch_k_sm': 1.051292639302652,\n",
       " 'boll_up': 11.068555165935514,\n",
       " 'stoch_d': 0.7494233208819634,\n",
       " 'ichi_sig': 0.4129179286065064,\n",
       " 'boll_low': 4.161618702608721,\n",
       " 'stoch_sig': 0.004388255035803943,\n",
       " 'macd_rel': 2.591214526764,\n",
       " 'pivot_pt': 1.305089678045356,\n",
       " 'macd_sig_rel': 2.0611473640496483,\n",
       " 'wma_rel': 0.3595909008217805,\n",
       " 'stoch_sig_val': 0.5748618367237587,\n",
       " 's&p500': 23.22781843476495,\n",
       " 'ichi_a': 1.5256332399117845,\n",
       " 'boll_sig': 0.022704388672477795,\n",
       " 'adx': 0.6898972675536279,\n",
       " 'ichi_conv': 1.806973587593364,\n",
       " 'ma_rel': 0.5834884388247585,\n",
       " 'sma_rel': 0.7065922270153443,\n",
       " 'rsi': 2.283321873115579,\n",
       " 'sar_rel': 1.76173451343903,\n",
       " 'macd': 3.0040363358261675,\n",
       " 'support2': 1.8776406012705642,\n",
       " 'atr': 2.9697787793327657,\n",
       " 'resist1': 1.767511960940848,\n",
       " 'ema_rel': 0.41116018871049725,\n",
       " 'support1': 4.680012791721418,\n",
       " 'ichi_base': 1.4811295627355971,\n",
       " 'exch': 1.106351640054267,\n",
       " 'resist2': 3.302949567461526,\n",
       " 'ichi_b': 1.113443289790187,\n",
       " 'macd_hist_rel': 0.8878805387526909}"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict_import"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "отсеиваю по порогу macd_hist_rel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0-jwmgBiY5tz"
   },
   "outputs": [],
   "source": [
    "low_label = dict_import['macd_hist_rel']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "gd-yB3BUY22c"
   },
   "outputs": [],
   "source": [
    "features = []\n",
    "for name in X.columns:\n",
    "    if dict_import[name] < low_label:\n",
    "        features.append(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "AwjrFpjvZcgG"
   },
   "outputs": [],
   "source": [
    "X = X.drop(features, axis = 1)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Смотрю как 410 mb стали 63"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Ak7K3amsZt-S",
    "outputId": "c77e1679-c110-432b-a9c4-f420b67a7214"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1366032 entries, 0 to 1366031\n",
      "Data columns (total 25 columns):\n",
      " #   Column         Non-Null Count    Dtype  \n",
      "---  ------         --------------    -----  \n",
      " 0   vwap_short     1366032 non-null  float16\n",
      " 1   resist3        1366032 non-null  float16\n",
      " 2   stoch_k        1366032 non-null  float16\n",
      " 3   support3       1366032 non-null  float16\n",
      " 4   stoch_k_sm     1366032 non-null  float16\n",
      " 5   boll_up        1366032 non-null  float16\n",
      " 6   boll_low       1366032 non-null  float16\n",
      " 7   macd_rel       1366032 non-null  float16\n",
      " 8   pivot_pt       1366032 non-null  float16\n",
      " 9   macd_sig_rel   1366032 non-null  float16\n",
      " 10  s&p500         1366032 non-null  float16\n",
      " 11  ichi_a         1366032 non-null  float16\n",
      " 12  ichi_conv      1366032 non-null  float16\n",
      " 13  rsi            1366032 non-null  float16\n",
      " 14  sar_rel        1366032 non-null  float16\n",
      " 15  macd           1366032 non-null  float16\n",
      " 16  support2       1366032 non-null  float16\n",
      " 17  atr            1366032 non-null  float16\n",
      " 18  resist1        1366032 non-null  float16\n",
      " 19  support1       1366032 non-null  float16\n",
      " 20  ichi_base      1366032 non-null  float16\n",
      " 21  exch           1366032 non-null  int8   \n",
      " 22  resist2        1366032 non-null  float16\n",
      " 23  ichi_b         1366032 non-null  float16\n",
      " 24  macd_hist_rel  1366032 non-null  float16\n",
      "dtypes: float16(24), int8(1)\n",
      "memory usage: 63.8 MB\n"
     ]
    }
   ],
   "source": [
    "X.info()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Проверяю модель на новых данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "LVOCq6heZzXH"
   },
   "outputs": [],
   "source": [
    "model.fit(X, y, verbose = 0)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Скор не изменился, значит это были колокни не несущие информации"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0-C0dpe1bM8o",
    "outputId": "4db8ef8d-8f56-48db-9a65-bc695c0b0ad8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9408498483198051"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1_score(model.predict(X), y, average = 'micro')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "То же самое с тестом"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "oI2sOCmIeqqO"
   },
   "outputs": [],
   "source": [
    "test = preprocessing(test, enc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "BPQzX8Qse9Av"
   },
   "outputs": [],
   "source": [
    "test[obj_name] = enc.transform(test[obj_name])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Yk_T6RSPexXL"
   },
   "outputs": [],
   "source": [
    "for col in obj_name:\n",
    "    test[col] = test[col].astype(np.int8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "yVpAz8v8fYvP"
   },
   "outputs": [],
   "source": [
    "features = []\n",
    "for name in dict_import.keys():\n",
    "    if dict_import[name] < low_label:\n",
    "        features.append(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "d42AHN3VfiXo",
    "outputId": "d8208479-9797-4b7d-c9f3-78acac71e232"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "2e0Y5nQafeAD"
   },
   "outputs": [],
   "source": [
    "test = test.drop(features, axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qCvfrpj9fQ_D",
    "outputId": "b60422e7-2f06-4f0e-b666-36f4c8ffeca0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 341166 entries, 0 to 341165\n",
      "Data columns (total 26 columns):\n",
      " #   Column         Non-Null Count   Dtype  \n",
      "---  ------         --------------   -----  \n",
      " 0   vwap_short     341166 non-null  float16\n",
      " 1   resist3        341166 non-null  float16\n",
      " 2   stoch_k        341166 non-null  float16\n",
      " 3   support3       341166 non-null  float16\n",
      " 4   result         341166 non-null  int8   \n",
      " 5   stoch_k_sm     341166 non-null  float16\n",
      " 6   boll_up        341166 non-null  float16\n",
      " 7   boll_low       341166 non-null  float16\n",
      " 8   macd_rel       341166 non-null  float16\n",
      " 9   pivot_pt       341166 non-null  float16\n",
      " 10  macd_sig_rel   341166 non-null  float16\n",
      " 11  s&p500         341166 non-null  float16\n",
      " 12  ichi_a         341166 non-null  float16\n",
      " 13  ichi_conv      341166 non-null  float16\n",
      " 14  rsi            341166 non-null  float16\n",
      " 15  sar_rel        341166 non-null  float16\n",
      " 16  macd           341166 non-null  float16\n",
      " 17  support2       341166 non-null  float16\n",
      " 18  atr            341166 non-null  float16\n",
      " 19  resist1        341166 non-null  float16\n",
      " 20  support1       341166 non-null  float16\n",
      " 21  ichi_base      341166 non-null  float16\n",
      " 22  exch           341166 non-null  int8   \n",
      " 23  resist2        341166 non-null  float16\n",
      " 24  ichi_b         341166 non-null  float16\n",
      " 25  macd_hist_rel  341166 non-null  float16\n",
      "dtypes: float16(24), int8(2)\n",
      "memory usage: 16.3 MB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "OBP09WSFfvSf"
   },
   "outputs": [],
   "source": [
    "y_test = test['result']\n",
    "X_test = test.drop('result', axis = 1)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Скор на тесте"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "L0xqEOTbf8CN",
    "outputId": "74a9ea48-2016-4d84-f82b-2fde6d352664"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9336803784667874"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1_score(model.predict(X_test), y_test, average = 'micro')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Обьединяю данные, так как все равно кросс валидирую"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_new = pd.concat([train, train_1], axis = 0)\n",
    "train_new['result'] = train_new['result'].astype('category')\n",
    "train = pd.concat([X, y], axis = 1)\n",
    "train_1 = pd.concat([X_test, y_test], axis = 1)\n",
    "train = pd.concat([X, y], axis = 1)\n",
    "train_1 = pd.concat([X_test, y_test], axis = 1)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Catboost + cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "O8jRv_-5dPeT"
   },
   "outputs": [],
   "source": [
    "cat = cross_validate(CatBoostClassifier(), X, y)\n",
    "pred = pred_cross(cat, X_test)\n",
    "f1_score(pred, y_test, average = 'micro')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Catboost + cv + optuna"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "-9fRw-5OdvO9"
   },
   "outputs": [],
   "source": [
    "study = optuna.create_study(direction=\"maximize\")\n",
    "study.optimize(objective, n_trials=50, timeout=600)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "vLHFxXXGeJd6"
   },
   "outputs": [],
   "source": [
    "cat = cross_validate(CatBoostClassifier(study.best_trial.params), X, y)\n",
    "pred = pred_cross(cat, X_test)\n",
    "f1_score(pred, y_test, average = 'micro')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Сравниваю данные для предсказания и для предикт. В целом распределения похожи."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 868
    },
    "id": "j4aA-hCeS3lD",
    "outputId": "bc739baf-443c-4e34-d196-58015cce7a83"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x1000 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "train_new.select_dtypes(include=['int16', 'float16']).hist(bins=30, figsize=(10, 10))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 853
    },
    "id": "RoqTASQgT2Df",
    "outputId": "5707429e-c5d8-4f7a-b352-5747c59ca39a"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x1000 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test.select_dtypes(include=['int16', 'float16']).hist(bins=30, figsize=(10, 10))\n",
    "plt.savefig('solution.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Дисбаланс классов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 472
    },
    "id": "B9uI3aFDzuU_",
    "outputId": "351e99e3-3a73-489a-abaf-644bc79344a0"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.grid(True)\n",
    "plt.title('Histogram distribution of result')\n",
    "plt.ylabel('Frequency')\n",
    "plt.xlabel('number of records')\n",
    "plt.xlim(0,1)\n",
    "plt.hist(y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Autoxgb : xgb + gpu + optuna + cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "b6hSQiHOVYVw"
   },
   "outputs": [],
   "source": [
    "train_filename=\"train.csv\"\n",
    "output=\"sub\"\n",
    "test_filename=\"test.csv\"\n",
    "idx=\"Id\"\n",
    "targets=[\"result\"]\n",
    "use_gpu=True\n",
    "num_folds=5\n",
    "seed=42\n",
    "num_trials=50\n",
    "time_limit=3600\n",
    "categorical_features = ['result']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "QbbGcVsEVZk6",
    "outputId": "4fc98627-39f0-4fd0-97bb-c0e59c597969"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-09-12 21:46:04,645 INFO Output directory: sub\n",
      "INFO:autoxgb:Output directory: sub\n"
     ]
    }
   ],
   "source": [
    "axgb=AutoXGB(\n",
    "    train_filename=train_filename,\n",
    "    output=output,\n",
    "    test_filename=test_filename,\n",
    "    idx=idx,\n",
    "    targets=targets,\n",
    "    use_gpu=use_gpu,\n",
    "    num_folds=num_folds,\n",
    "    num_trials=num_trials,\n",
    "    time_limit=time_limit\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "GKovygrIVcC_",
    "outputId": "7615e585-d947-44a2-ffce-ac89eb18fdfc"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-09-12 21:46:06,618 INFO Reading training data\n",
      "INFO:autoxgb:Reading training data\n",
      "2023-09-12 21:46:18,633 INFO Mem. usage decreased to 87.92 Mb (75.0% reduction)\n",
      "INFO:autoxgb:Mem. usage decreased to 87.92 Mb (75.0% reduction)\n",
      "2023-09-12 21:46:18,721 INFO Problem type: binary_classification\n",
      "INFO:autoxgb:Problem type: binary_classification\n",
      "2023-09-12 21:46:18,748 INFO Mem. usage decreased to 0.02 Mb (75.3% reduction)\n",
      "INFO:autoxgb:Mem. usage decreased to 0.02 Mb (75.3% reduction)\n",
      "2023-09-12 21:46:18,752 INFO Creating folds\n",
      "INFO:autoxgb:Creating folds\n",
      "2023-09-12 21:46:19,119 INFO Encoding target(s)\n",
      "INFO:autoxgb:Encoding target(s)\n",
      "2023-09-12 21:46:19,206 INFO Found 0 categorical features.\n",
      "INFO:autoxgb:Found 0 categorical features.\n",
      "2023-09-12 21:46:23,426 INFO Model config: train_filename='train.csv' test_filename='test.csv' idx='Id' targets=['result'] problem_type=<ProblemType.binary_classification: 1> output='sub' features=['Unnamed: 0', 'vwap_short', 'resist3', 'stoch_k', 'support3', 'stoch_k_sm', 'boll_up', 'boll_low', 'macd_rel', 'pivot_pt', 'macd_sig_rel', 's&p500', 'ichi_a', 'ichi_conv', 'rsi', 'sar_rel', 'macd', 'support2', 'atr', 'resist1', 'support1', 'ichi_base', 'exch', 'resist2', 'ichi_b', 'macd_hist_rel'] num_folds=5 use_gpu=True seed=42 categorical_features=[] num_trials=50 time_limit=3600 fast=False\n",
      "INFO:autoxgb:Model config: train_filename='train.csv' test_filename='test.csv' idx='Id' targets=['result'] problem_type=<ProblemType.binary_classification: 1> output='sub' features=['Unnamed: 0', 'vwap_short', 'resist3', 'stoch_k', 'support3', 'stoch_k_sm', 'boll_up', 'boll_low', 'macd_rel', 'pivot_pt', 'macd_sig_rel', 's&p500', 'ichi_a', 'ichi_conv', 'rsi', 'sar_rel', 'macd', 'support2', 'atr', 'resist1', 'support1', 'ichi_base', 'exch', 'resist2', 'ichi_b', 'macd_hist_rel'] num_folds=5 use_gpu=True seed=42 categorical_features=[] num_trials=50 time_limit=3600 fast=False\n",
      "2023-09-12 21:46:23,433 INFO Saving model config\n",
      "INFO:autoxgb:Saving model config\n",
      "2023-09-12 21:46:23,436 INFO Saving encoders\n",
      "INFO:autoxgb:Saving encoders\n",
      "[I 2023-09-12 21:46:24,013] A new study created in RDB with name: autoxgb\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:4: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_lambda\": trial.suggest_loguniform(\"reg_lambda\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:5: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_alpha\": trial.suggest_loguniform(\"reg_alpha\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 21:54:27,789 INFO Metrics: {'auc': 0.9368633502036783, 'logloss': 0.17225803308775292, 'f1': 0.9639220438156372, 'accuracy': 0.934690645081217, 'precision': 0.9487520903228079, 'recall': 0.9795850450376455}\n",
      "INFO:autoxgb:Metrics: {'auc': 0.9368633502036783, 'logloss': 0.17225803308775292, 'f1': 0.9639220438156372, 'accuracy': 0.934690645081217, 'precision': 0.9487520903228079, 'recall': 0.9795850450376455}\n",
      "[I 2023-09-12 21:54:27,832] Trial 0 finished with value: 0.17225803308775292 and parameters: {'learning_rate': 0.02332811993609085, 'reg_lambda': 4.546764809397207e-08, 'reg_alpha': 0.27053003605911746, 'subsample': 0.127808394398356, 'colsample_bytree': 0.46461067946082824, 'max_depth': 9, 'early_stopping_rounds': 213, 'n_estimators': 15000}. Best is trial 0 with value: 0.17225803308775292.\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:4: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_lambda\": trial.suggest_loguniform(\"reg_lambda\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:5: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_alpha\": trial.suggest_loguniform(\"reg_alpha\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 22:06:05,359 INFO Metrics: {'auc': 0.9320302252203015, 'logloss': 0.18008094627851973, 'f1': 0.9617020552464524, 'accuracy': 0.9305973879133547, 'precision': 0.9455830319442994, 'recall': 0.9783801805359321}\n",
      "INFO:autoxgb:Metrics: {'auc': 0.9320302252203015, 'logloss': 0.18008094627851973, 'f1': 0.9617020552464524, 'accuracy': 0.9305973879133547, 'precision': 0.9455830319442994, 'recall': 0.9783801805359321}\n",
      "[I 2023-09-12 22:06:05,399] Trial 1 finished with value: 0.18008094627851973 and parameters: {'learning_rate': 0.044666311703018144, 'reg_lambda': 0.0028832584766613576, 'reg_alpha': 0.0004979691913981871, 'subsample': 0.9370674682116502, 'colsample_bytree': 0.8527426022558919, 'max_depth': 2, 'early_stopping_rounds': 467, 'n_estimators': 20000}. Best is trial 0 with value: 0.17225803308775292.\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:4: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_lambda\": trial.suggest_loguniform(\"reg_lambda\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:5: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_alpha\": trial.suggest_loguniform(\"reg_alpha\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 22:13:52,632 INFO Metrics: {'auc': 0.9304678235587595, 'logloss': 0.1820100964770755, 'f1': 0.9612905657496922, 'accuracy': 0.9298558218219002, 'precision': 0.945232186559951, 'recall': 0.9779040223769266}\n",
      "INFO:autoxgb:Metrics: {'auc': 0.9304678235587595, 'logloss': 0.1820100964770755, 'f1': 0.9612905657496922, 'accuracy': 0.9298558218219002, 'precision': 0.945232186559951, 'recall': 0.9779040223769266}\n",
      "[I 2023-09-12 22:13:52,679] Trial 2 finished with value: 0.1820100964770755 and parameters: {'learning_rate': 0.16418445598548395, 'reg_lambda': 3.015840753204799e-06, 'reg_alpha': 0.011819185599750776, 'subsample': 0.33569186232396514, 'colsample_bytree': 0.1020974547118787, 'max_depth': 2, 'early_stopping_rounds': 209, 'n_estimators': 20000}. Best is trial 0 with value: 0.17225803308775292.\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:4: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_lambda\": trial.suggest_loguniform(\"reg_lambda\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:5: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_alpha\": trial.suggest_loguniform(\"reg_alpha\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 22:19:54,377 INFO Metrics: {'auc': 0.9318529298816263, 'logloss': 0.18006553776112616, 'f1': 0.9617814102391196, 'accuracy': 0.9307297686853561, 'precision': 0.9455098709898928, 'recall': 0.9786228633620391}\n",
      "INFO:autoxgb:Metrics: {'auc': 0.9318529298816263, 'logloss': 0.18006553776112616, 'f1': 0.9617814102391196, 'accuracy': 0.9307297686853561, 'precision': 0.9455098709898928, 'recall': 0.9786228633620391}\n",
      "[I 2023-09-12 22:19:54,414] Trial 3 finished with value: 0.18006553776112616 and parameters: {'learning_rate': 0.010812818617344221, 'reg_lambda': 0.5927012430390647, 'reg_alpha': 0.025079181511378633, 'subsample': 0.23615141677483054, 'colsample_bytree': 0.5927039141817102, 'max_depth': 4, 'early_stopping_rounds': 170, 'n_estimators': 7000}. Best is trial 0 with value: 0.17225803308775292.\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:4: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_lambda\": trial.suggest_loguniform(\"reg_lambda\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:5: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_alpha\": trial.suggest_loguniform(\"reg_alpha\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 22:23:49,156 INFO Metrics: {'auc': 0.9309628850024607, 'logloss': 0.18113311576532007, 'f1': 0.961537024995984, 'accuracy': 0.9303039244406742, 'precision': 0.9454943653425385, 'recall': 0.9781335515832236}\n",
      "INFO:autoxgb:Metrics: {'auc': 0.9309628850024607, 'logloss': 0.18113311576532007, 'f1': 0.961537024995984, 'accuracy': 0.9303039244406742, 'precision': 0.9454943653425385, 'recall': 0.9781335515832236}\n",
      "[I 2023-09-12 22:23:49,200] Trial 4 finished with value: 0.18113311576532007 and parameters: {'learning_rate': 0.12139303815407354, 'reg_lambda': 2.0639707391580583e-08, 'reg_alpha': 3.3629746941616626e-08, 'subsample': 0.18888280814727815, 'colsample_bytree': 0.15486916082707522, 'max_depth': 3, 'early_stopping_rounds': 144, 'n_estimators': 15000}. Best is trial 0 with value: 0.17225803308775292.\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:4: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_lambda\": trial.suggest_loguniform(\"reg_lambda\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:5: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_alpha\": trial.suggest_loguniform(\"reg_alpha\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 22:37:01,272 INFO Metrics: {'auc': 0.9409825744306856, 'logloss': 0.16654418496738949, 'f1': 0.9651909638225014, 'accuracy': 0.9370512381567837, 'precision': 0.9509312194790341, 'recall': 0.9798849457976327}\n",
      "INFO:autoxgb:Metrics: {'auc': 0.9409825744306856, 'logloss': 0.16654418496738949, 'f1': 0.9651909638225014, 'accuracy': 0.9370512381567837, 'precision': 0.9509312194790341, 'recall': 0.9798849457976327}\n",
      "[I 2023-09-12 22:37:01,308] Trial 5 finished with value: 0.16654418496738949 and parameters: {'learning_rate': 0.035711113122717596, 'reg_lambda': 11.76296316005085, 'reg_alpha': 7.663248772132647, 'subsample': 0.5018726397785096, 'colsample_bytree': 0.6209459453302835, 'max_depth': 9, 'early_stopping_rounds': 143, 'n_estimators': 15000}. Best is trial 5 with value: 0.16654418496738949.\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:4: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_lambda\": trial.suggest_loguniform(\"reg_lambda\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:5: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_alpha\": trial.suggest_loguniform(\"reg_alpha\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 22:40:42,509 INFO Metrics: {'auc': 0.9366405819969182, 'logloss': 0.17267532370654654, 'f1': 0.9638171701208726, 'accuracy': 0.9345119898447724, 'precision': 0.9488062167933012, 'recall': 0.9793107938107684}\n",
      "INFO:autoxgb:Metrics: {'auc': 0.9366405819969182, 'logloss': 0.17267532370654654, 'f1': 0.9638171701208726, 'accuracy': 0.9345119898447724, 'precision': 0.9488062167933012, 'recall': 0.9793107938107684}\n",
      "[I 2023-09-12 22:40:42,544] Trial 6 finished with value: 0.17267532370654654 and parameters: {'learning_rate': 0.22617648296612303, 'reg_lambda': 1.910734304298256e-07, 'reg_alpha': 1.2388759500628773e-08, 'subsample': 0.7770279315448135, 'colsample_bytree': 0.9337404632632834, 'max_depth': 4, 'early_stopping_rounds': 387, 'n_estimators': 7000}. Best is trial 5 with value: 0.16654418496738949.\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:4: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_lambda\": trial.suggest_loguniform(\"reg_lambda\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/autoxgb/params.py:5: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
      "  \"reg_alpha\": trial.suggest_loguniform(\"reg_alpha\", 1e-8, 100.0),\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 22:58:49,340 INFO Metrics: {'auc': 0.9358551044397638, 'logloss': 0.17392060883421726, 'f1': 0.9634324354890482, 'accuracy': 0.9337581227691565, 'precision': 0.947629746489777, 'recall': 0.9797711676623351}\n",
      "INFO:autoxgb:Metrics: {'auc': 0.9358551044397638, 'logloss': 0.17392060883421726, 'f1': 0.9634324354890482, 'accuracy': 0.9337581227691565, 'precision': 0.947629746489777, 'recall': 0.9797711676623351}\n",
      "[I 2023-09-12 22:58:49,405] Trial 7 finished with value: 0.17392060883421726 and parameters: {'learning_rate': 0.012996414343000489, 'reg_lambda': 3.606478004831296e-08, 'reg_alpha': 6.165131806077836e-08, 'subsample': 0.16432777193207163, 'colsample_bytree': 0.19018623078954758, 'max_depth': 8, 'early_stopping_rounds': 119, 'n_estimators': 20000}. Best is trial 5 with value: 0.16654418496738949.\n",
      "2023-09-12 22:58:49,418 INFO Training complete\n",
      "INFO:autoxgb:Training complete\n",
      "2023-09-12 22:58:49,424 INFO Creating OOF and test predictions\n",
      "INFO:autoxgb:Creating OOF and test predictions\n",
      "2023-09-12 22:58:49,433 INFO Training and predicting for fold 0\n",
      "INFO:autoxgb:Training and predicting for fold 0\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 23:01:37,022 INFO Fold 0 done!\n",
      "INFO:autoxgb:Fold 0 done!\n",
      "2023-09-12 23:01:37,029 INFO Training and predicting for fold 1\n",
      "INFO:autoxgb:Training and predicting for fold 1\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 23:04:25,459 INFO Fold 1 done!\n",
      "INFO:autoxgb:Fold 1 done!\n",
      "2023-09-12 23:04:25,467 INFO Training and predicting for fold 2\n",
      "INFO:autoxgb:Training and predicting for fold 2\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 23:06:49,385 INFO Fold 2 done!\n",
      "INFO:autoxgb:Fold 2 done!\n",
      "2023-09-12 23:06:49,393 INFO Training and predicting for fold 3\n",
      "INFO:autoxgb:Training and predicting for fold 3\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 23:09:15,444 INFO Fold 3 done!\n",
      "INFO:autoxgb:Fold 3 done!\n",
      "2023-09-12 23:09:15,449 INFO Training and predicting for fold 4\n",
      "INFO:autoxgb:Training and predicting for fold 4\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
      "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:835: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "2023-09-12 23:12:03,861 INFO Fold 4 done!\n",
      "INFO:autoxgb:Fold 4 done!\n",
      "2023-09-12 23:12:03,869 INFO Metrics: {'auc': 0.9409825744306856, 'logloss': 0.16654418496738949, 'f1': 0.9651909638225014, 'accuracy': 0.9370512381567837, 'precision': 0.9509312194790341, 'recall': 0.9798849457976327}\n",
      "INFO:autoxgb:Metrics: {'auc': 0.9409825744306856, 'logloss': 0.16654418496738949, 'f1': 0.9651909638225014, 'accuracy': 0.9370512381567837, 'precision': 0.9509312194790341, 'recall': 0.9798849457976327}\n"
     ]
    }
   ],
   "source": [
    "axgb.train()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Automl : xgb + gpu + optuna + sctacking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 413
    },
    "id": "_uHanytasWzg",
    "outputId": "60d9ed4e-3310-4462-f15c-bc0132fe4277"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking whether there is an H2O instance running at http://localhost:54321. connected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "\n",
       "#h2o-table-3.h2o-container {\n",
       "  overflow-x: auto;\n",
       "}\n",
       "#h2o-table-3 .h2o-table {\n",
       "  /* width: 100%; */\n",
       "  margin-top: 1em;\n",
       "  margin-bottom: 1em;\n",
       "}\n",
       "#h2o-table-3 .h2o-table caption {\n",
       "  white-space: nowrap;\n",
       "  caption-side: top;\n",
       "  text-align: left;\n",
       "  /* margin-left: 1em; */\n",
       "  margin: 0;\n",
       "  font-size: larger;\n",
       "}\n",
       "#h2o-table-3 .h2o-table thead {\n",
       "  white-space: nowrap; \n",
       "  position: sticky;\n",
       "  top: 0;\n",
       "  box-shadow: 0 -1px inset;\n",
       "}\n",
       "#h2o-table-3 .h2o-table tbody {\n",
       "  overflow: auto;\n",
       "}\n",
       "#h2o-table-3 .h2o-table th,\n",
       "#h2o-table-3 .h2o-table td {\n",
       "  text-align: right;\n",
       "  /* border: 1px solid; */\n",
       "}\n",
       "#h2o-table-3 .h2o-table tr:nth-child(even) {\n",
       "  /* background: #F5F5F5 */\n",
       "}\n",
       "\n",
       "</style>      \n",
       "<div id=\"h2o-table-3\" class=\"h2o-container\">\n",
       "  <table class=\"h2o-table\">\n",
       "    <caption></caption>\n",
       "    <thead></thead>\n",
       "    <tbody><tr><td>H2O_cluster_uptime:</td>\n",
       "<td>5 mins 12 secs</td></tr>\n",
       "<tr><td>H2O_cluster_timezone:</td>\n",
       "<td>Etc/UTC</td></tr>\n",
       "<tr><td>H2O_data_parsing_timezone:</td>\n",
       "<td>UTC</td></tr>\n",
       "<tr><td>H2O_cluster_version:</td>\n",
       "<td>3.42.0.3</td></tr>\n",
       "<tr><td>H2O_cluster_version_age:</td>\n",
       "<td>21 days, 21 hours and 28 minutes</td></tr>\n",
       "<tr><td>H2O_cluster_name:</td>\n",
       "<td>H2O_from_python_unknownUser_mjc191</td></tr>\n",
       "<tr><td>H2O_cluster_total_nodes:</td>\n",
       "<td>1</td></tr>\n",
       "<tr><td>H2O_cluster_free_memory:</td>\n",
       "<td>9.56 Gb</td></tr>\n",
       "<tr><td>H2O_cluster_total_cores:</td>\n",
       "<td>2</td></tr>\n",
       "<tr><td>H2O_cluster_allowed_cores:</td>\n",
       "<td>2</td></tr>\n",
       "<tr><td>H2O_cluster_status:</td>\n",
       "<td>locked, healthy</td></tr>\n",
       "<tr><td>H2O_connection_url:</td>\n",
       "<td>http://localhost:54321</td></tr>\n",
       "<tr><td>H2O_connection_proxy:</td>\n",
       "<td>{\"http\": null, \"https\": null, \"colab_language_server\": \"/usr/colab/bin/language_service\"}</td></tr>\n",
       "<tr><td>H2O_internal_security:</td>\n",
       "<td>False</td></tr>\n",
       "<tr><td>Python_version:</td>\n",
       "<td>3.10.12 final</td></tr></tbody>\n",
       "  </table>\n",
       "</div>\n"
      ],
      "text/plain": [
       "--------------------------  -----------------------------------------------------------------------------------------\n",
       "H2O_cluster_uptime:         5 mins 12 secs\n",
       "H2O_cluster_timezone:       Etc/UTC\n",
       "H2O_data_parsing_timezone:  UTC\n",
       "H2O_cluster_version:        3.42.0.3\n",
       "H2O_cluster_version_age:    21 days, 21 hours and 28 minutes\n",
       "H2O_cluster_name:           H2O_from_python_unknownUser_mjc191\n",
       "H2O_cluster_total_nodes:    1\n",
       "H2O_cluster_free_memory:    9.56 Gb\n",
       "H2O_cluster_total_cores:    2\n",
       "H2O_cluster_allowed_cores:  2\n",
       "H2O_cluster_status:         locked, healthy\n",
       "H2O_connection_url:         http://localhost:54321\n",
       "H2O_connection_proxy:       {\"http\": null, \"https\": null, \"colab_language_server\": \"/usr/colab/bin/language_service\"}\n",
       "H2O_internal_security:      False\n",
       "Python_version:             3.10.12 final\n",
       "--------------------------  -----------------------------------------------------------------------------------------"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parse progress: |████████████████████████████████████████████████████████████████| (done) 100%\n",
      "Parse progress: |████████████████████████████████████████████████████████████████| (done) 100%\n"
     ]
    }
   ],
   "source": [
    "h2o.init(max_mem_size='10G')\n",
    "train = h2o.import_file(\"train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rqMlilY_I-Q5",
    "outputId": "bcc584f5-e40c-4ec5-f492-15637bb66178"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parse progress: |████████████████████████████████████████████████████████████████| (done) 100%\n"
     ]
    }
   ],
   "source": [
    "test = h2o.import_file(\"solut.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "S97PHelsxuuL"
   },
   "outputs": [],
   "source": [
    "x = train.columns\n",
    "y = 'result'\n",
    "x.remove(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "5P7XhrgXxxHv"
   },
   "outputs": [],
   "source": [
    "aml = H2OAutoML(seed = 1, project_name = \"submit\", nfolds = 3, max_runtime_secs = 5400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "KGdZU09XylS6",
    "outputId": "d78dcf12-813b-4402-dde4-a4232f3daaf9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h2o.estimators.xgboost.H2OXGBoostEstimator.available()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "ASrkfU9SyURQ",
    "outputId": "89e419bc-3b68-4363-874f-e92c7c57e3a9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AutoML progress: |\n",
      "13:45:45.590: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:45.590: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:45.616: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:45.639: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:45.639: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:45.642: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:45.642: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:45.653: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:45.653: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:45.661: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:45.661: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:45.669: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:45.669: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:45.671: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:45.671: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:45.682: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:45.682: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:45.684: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:45.684: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:45.702: Empty leaderboard.\n",
      "AutoML was not able to build any model within a max runtime constraint of 7200 seconds, you may want to increase this value before retrying.\n",
      "13:45:59.621: New models will be added to existing leaderboard submit@@result (leaderboard frame=null) with already 0 models.\n",
      "13:45:59.639: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:59.639: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:59.646: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:59.650: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:59.650: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:59.658: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:59.658: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:59.664: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:59.664: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:59.666: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:59.666: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:59.670: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:59.670: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:59.672: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:59.673: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:59.675: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:59.675: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:59.677: _response_column param, Use numerical, categorical or time variable. Currently used String\n",
      "13:45:59.678: _stopping_metric param, Stopping metric cannot be AUC for regression.\n",
      "13:45:59.705: Empty leaderboard.\n",
      "AutoML was not able to build any model within a max runtime constraint of 600 seconds, you may want to increase this value before retrying.\n",
      "13:47:35.682: New models will be added to existing leaderboard submit@@result (leaderboard frame=null) with already 0 models.\n",
      "13:47:35.699: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "███████\n",
      "13:54:50.75: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "█\n",
      "13:57:09.427: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "███████████████\n",
      "14:19:54.87: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "█\n",
      "14:20:01.819: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "████\n",
      "14:26:24.642: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "██████\n",
      "14:36:00.240: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "██████\n",
      "14:44:32.937: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "██████\n",
      "14:53:19.321: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "██████\n",
      "15:02:21.993: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "\n",
      "15:02:30.630: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "\n",
      "15:02:38.87: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "██\n",
      "15:05:23.448: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "██\n",
      "15:08:24.636: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "██\n",
      "15:10:55.94: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "██\n",
      "15:13:30.595: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "\n",
      "15:13:39.413: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n",
      "███| (done) 100%\n",
      "\n",
      "15:17:32.616: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style='margin: 1em 0 1em 0;'>Model Details\n",
       "=============\n",
       "H2OStackedEnsembleEstimator : Stacked Ensemble\n",
       "Model Key: StackedEnsemble_AllModels_2_AutoML_3_20230913_134735\n",
       "</pre>\n",
       "<div style='margin: 1em 0 1em 0;'>\n",
       "<style>\n",
       "\n",
       "#h2o-table-4.h2o-container {\n",
       "  overflow-x: auto;\n",
       "}\n",
       "#h2o-table-4 .h2o-table {\n",
       "  /* width: 100%; */\n",
       "  margin-top: 1em;\n",
       "  margin-bottom: 1em;\n",
       "}\n",
       "#h2o-table-4 .h2o-table caption {\n",
       "  white-space: nowrap;\n",
       "  caption-side: top;\n",
       "  text-align: left;\n",
       "  /* margin-left: 1em; */\n",
       "  margin: 0;\n",
       "  font-size: larger;\n",
       "}\n",
       "#h2o-table-4 .h2o-table thead {\n",
       "  white-space: nowrap; \n",
       "  position: sticky;\n",
       "  top: 0;\n",
       "  box-shadow: 0 -1px inset;\n",
       "}\n",
       "#h2o-table-4 .h2o-table tbody {\n",
       "  overflow: auto;\n",
       "}\n",
       "#h2o-table-4 .h2o-table th,\n",
       "#h2o-table-4 .h2o-table td {\n",
       "  text-align: right;\n",
       "  /* border: 1px solid; */\n",
       "}\n",
       "#h2o-table-4 .h2o-table tr:nth-child(even) {\n",
       "  /* background: #F5F5F5 */\n",
       "}\n",
       "\n",
       "</style>      \n",
       "<div id=\"h2o-table-4\" class=\"h2o-container\">\n",
       "  <table class=\"h2o-table\">\n",
       "    <caption>Model Summary for Stacked Ensemble: </caption>\n",
       "    <thead><tr><th>key</th>\n",
       "<th>value</th></tr></thead>\n",
       "    <tbody><tr><td>Stacking strategy</td>\n",
       "<td>cross_validation</td></tr>\n",
       "<tr><td>Number of base models (used / total)</td>\n",
       "<td>5/12</td></tr>\n",
       "<tr><td># GBM base models (used / total)</td>\n",
       "<td>1/5</td></tr>\n",
       "<tr><td># XGBoost base models (used / total)</td>\n",
       "<td>2/3</td></tr>\n",
       "<tr><td># DRF base models (used / total)</td>\n",
       "<td>2/2</td></tr>\n",
       "<tr><td># DeepLearning base models (used / total)</td>\n",
       "<td>0/1</td></tr>\n",
       "<tr><td># GLM base models (used / total)</td>\n",
       "<td>0/1</td></tr>\n",
       "<tr><td>Metalearner algorithm</td>\n",
       "<td>GLM</td></tr>\n",
       "<tr><td>Metalearner fold assignment scheme</td>\n",
       "<td>Random</td></tr>\n",
       "<tr><td>Metalearner nfolds</td>\n",
       "<td>3</td></tr>\n",
       "<tr><td>Metalearner fold_column</td>\n",
       "<td>None</td></tr>\n",
       "<tr><td>Custom metalearner hyperparameters</td>\n",
       "<td>None</td></tr></tbody>\n",
       "  </table>\n",
       "</div>\n",
       "</div>\n",
       "<div style='margin: 1em 0 1em 0;'><pre style='margin: 1em 0 1em 0;'>ModelMetricsRegressionGLM: stackedensemble\n",
       "** Reported on train data. **\n",
       "\n",
       "MSE: 0.03729551497972478\n",
       "RMSE: 0.19312046753186152\n",
       "MAE: 0.08407240262588603\n",
       "RMSLE: 0.13599718714279968\n",
       "Mean Residual Deviance: 0.03729551497972478\n",
       "R^2: 0.625452681238216\n",
       "Null degrees of freedom: 10021\n",
       "Residual degrees of freedom: 10016\n",
       "Null deviance: 998.0180643353003\n",
       "Residual deviance: 373.7756511268018\n",
       "AIC: -4505.973462800478</pre></div>\n",
       "<div style='margin: 1em 0 1em 0;'><pre style='margin: 1em 0 1em 0;'>ModelMetricsRegressionGLM: stackedensemble\n",
       "** Reported on cross-validation data. **\n",
       "\n",
       "MSE: 0.04818222379299378\n",
       "RMSE: 0.2195044960655562\n",
       "MAE: 0.09755094362867157\n",
       "RMSLE: 0.1533292866679374\n",
       "Mean Residual Deviance: 0.04818222379299378\n",
       "R^2: 0.5053082601882901\n",
       "Null degrees of freedom: 1707197\n",
       "Residual degrees of freedom: 1707192\n",
       "Null deviance: 166278.55637624965\n",
       "Residual deviance: 82256.5960949514\n",
       "AIC: -332698.50713555637</pre></div>\n",
       "<div style='margin: 1em 0 1em 0;'>\n",
       "<style>\n",
       "\n",
       "#h2o-table-5.h2o-container {\n",
       "  overflow-x: auto;\n",
       "}\n",
       "#h2o-table-5 .h2o-table {\n",
       "  /* width: 100%; */\n",
       "  margin-top: 1em;\n",
       "  margin-bottom: 1em;\n",
       "}\n",
       "#h2o-table-5 .h2o-table caption {\n",
       "  white-space: nowrap;\n",
       "  caption-side: top;\n",
       "  text-align: left;\n",
       "  /* margin-left: 1em; */\n",
       "  margin: 0;\n",
       "  font-size: larger;\n",
       "}\n",
       "#h2o-table-5 .h2o-table thead {\n",
       "  white-space: nowrap; \n",
       "  position: sticky;\n",
       "  top: 0;\n",
       "  box-shadow: 0 -1px inset;\n",
       "}\n",
       "#h2o-table-5 .h2o-table tbody {\n",
       "  overflow: auto;\n",
       "}\n",
       "#h2o-table-5 .h2o-table th,\n",
       "#h2o-table-5 .h2o-table td {\n",
       "  text-align: right;\n",
       "  /* border: 1px solid; */\n",
       "}\n",
       "#h2o-table-5 .h2o-table tr:nth-child(even) {\n",
       "  /* background: #F5F5F5 */\n",
       "}\n",
       "\n",
       "</style>      \n",
       "<div id=\"h2o-table-5\" class=\"h2o-container\">\n",
       "  <table class=\"h2o-table\">\n",
       "    <caption>Cross-Validation Metrics Summary: </caption>\n",
       "    <thead><tr><th></th>\n",
       "<th>mean</th>\n",
       "<th>sd</th>\n",
       "<th>cv_1_valid</th>\n",
       "<th>cv_2_valid</th>\n",
       "<th>cv_3_valid</th></tr></thead>\n",
       "    <tbody><tr><td>mae</td>\n",
       "<td>0.0975509</td>\n",
       "<td>0.0000705</td>\n",
       "<td>0.0975754</td>\n",
       "<td>0.0974714</td>\n",
       "<td>0.0976058</td></tr>\n",
       "<tr><td>mean_residual_deviance</td>\n",
       "<td>0.0481821</td>\n",
       "<td>0.0000829</td>\n",
       "<td>0.0482761</td>\n",
       "<td>0.0481196</td>\n",
       "<td>0.0481507</td></tr>\n",
       "<tr><td>mse</td>\n",
       "<td>0.0481821</td>\n",
       "<td>0.0000829</td>\n",
       "<td>0.0482761</td>\n",
       "<td>0.0481196</td>\n",
       "<td>0.0481507</td></tr>\n",
       "<tr><td>null_deviance</td>\n",
       "<td>55426.184</td>\n",
       "<td>208.37466</td>\n",
       "<td>55621.246</td>\n",
       "<td>55206.656</td>\n",
       "<td>55450.652</td></tr>\n",
       "<tr><td>r2</td>\n",
       "<td>0.5053080</td>\n",
       "<td>0.0006174</td>\n",
       "<td>0.5049294</td>\n",
       "<td>0.5049742</td>\n",
       "<td>0.5060204</td></tr>\n",
       "<tr><td>residual_deviance</td>\n",
       "<td>27418.865</td>\n",
       "<td>106.54642</td>\n",
       "<td>27536.43</td>\n",
       "<td>27328.684</td>\n",
       "<td>27391.482</td></tr>\n",
       "<tr><td>rmse</td>\n",
       "<td>0.2195042</td>\n",
       "<td>0.0001887</td>\n",
       "<td>0.2197182</td>\n",
       "<td>0.2193617</td>\n",
       "<td>0.2194327</td></tr>\n",
       "<tr><td>rmsle</td>\n",
       "<td>0.1533291</td>\n",
       "<td>0.0001098</td>\n",
       "<td>0.1534506</td>\n",
       "<td>0.1532372</td>\n",
       "<td>0.1532995</td></tr></tbody>\n",
       "  </table>\n",
       "</div>\n",
       "</div><pre style=\"font-size: smaller; margin: 1em 0 0 0;\">\n",
       "\n",
       "[tips]\n",
       "Use `model.explain()` to inspect the model.\n",
       "--\n",
       "Use `h2o.display.toggle_user_tips()` to switch on/off this section.</pre>"
      ],
      "text/plain": [
       "Model Details\n",
       "=============\n",
       "H2OStackedEnsembleEstimator : Stacked Ensemble\n",
       "Model Key: StackedEnsemble_AllModels_2_AutoML_3_20230913_134735\n",
       "\n",
       "\n",
       "Model Summary for Stacked Ensemble: \n",
       "key                                        value\n",
       "-----------------------------------------  ----------------\n",
       "Stacking strategy                          cross_validation\n",
       "Number of base models (used / total)       5/12\n",
       "# GBM base models (used / total)           1/5\n",
       "# XGBoost base models (used / total)       2/3\n",
       "# DRF base models (used / total)           2/2\n",
       "# DeepLearning base models (used / total)  0/1\n",
       "# GLM base models (used / total)           0/1\n",
       "Metalearner algorithm                      GLM\n",
       "Metalearner fold assignment scheme         Random\n",
       "Metalearner nfolds                         3\n",
       "Metalearner fold_column\n",
       "Custom metalearner hyperparameters         None\n",
       "\n",
       "ModelMetricsRegressionGLM: stackedensemble\n",
       "** Reported on train data. **\n",
       "\n",
       "MSE: 0.03729551497972478\n",
       "RMSE: 0.19312046753186152\n",
       "MAE: 0.08407240262588603\n",
       "RMSLE: 0.13599718714279968\n",
       "Mean Residual Deviance: 0.03729551497972478\n",
       "R^2: 0.625452681238216\n",
       "Null degrees of freedom: 10021\n",
       "Residual degrees of freedom: 10016\n",
       "Null deviance: 998.0180643353003\n",
       "Residual deviance: 373.7756511268018\n",
       "AIC: -4505.973462800478\n",
       "\n",
       "ModelMetricsRegressionGLM: stackedensemble\n",
       "** Reported on cross-validation data. **\n",
       "\n",
       "MSE: 0.04818222379299378\n",
       "RMSE: 0.2195044960655562\n",
       "MAE: 0.09755094362867157\n",
       "RMSLE: 0.1533292866679374\n",
       "Mean Residual Deviance: 0.04818222379299378\n",
       "R^2: 0.5053082601882901\n",
       "Null degrees of freedom: 1707197\n",
       "Residual degrees of freedom: 1707192\n",
       "Null deviance: 166278.55637624965\n",
       "Residual deviance: 82256.5960949514\n",
       "AIC: -332698.50713555637\n",
       "\n",
       "Cross-Validation Metrics Summary: \n",
       "                        mean       sd           cv_1_valid    cv_2_valid    cv_3_valid\n",
       "----------------------  ---------  -----------  ------------  ------------  ------------\n",
       "mae                     0.0975509  7.04856e-05  0.0975754     0.0974714     0.0976058\n",
       "mean_residual_deviance  0.0481821  8.28538e-05  0.0482761     0.0481196     0.0481507\n",
       "mse                     0.0481821  8.28538e-05  0.0482761     0.0481196     0.0481507\n",
       "null_deviance           55426.2    208.375      55621.2       55206.7       55450.7\n",
       "r2                      0.505308   0.000617386  0.504929      0.504974      0.50602\n",
       "residual_deviance       27418.9    106.546      27536.4       27328.7       27391.5\n",
       "rmse                    0.219504   0.00018869   0.219718      0.219362      0.219433\n",
       "rmsle                   0.153329   0.000109759  0.153451      0.153237      0.1533\n",
       "\n",
       "[tips]\n",
       "Use `model.explain()` to inspect the model.\n",
       "--\n",
       "Use `h2o.display.toggle_user_tips()` to switch on/off this section."
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aml.train(x = x, y = y, training_frame = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YMlO4nWZzVj9",
    "outputId": "fe7832db-7bed-492e-c17c-95599bb6e0af"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "stackedensemble prediction progress: |███████████████████████████████████████████| (done) 100%\n"
     ]
    }
   ],
   "source": [
    "pred = aml.predict(test)"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "gpuType": "T4",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
